// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"io"
	"strconv"
	"sync"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/phxvlabs.io/kubernexus/nexus-server/graphql/customTypes"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Query() QueryResolver
	Subscription() SubscriptionResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	AddonList struct {
		Name  func(childComplexity int) int
		Owner func(childComplexity int) int
	}

	ApplicationPage struct {
		Applications func(childComplexity int) int
		Page         func(childComplexity int) int
		PageSize     func(childComplexity int) int
		TotalCount   func(childComplexity int) int
	}

	ApplicationResult struct {
		ApplicationFile func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		ID              func(childComplexity int) int
		Location        func(childComplexity int) int
		Name            func(childComplexity int) int
		Type            func(childComplexity int) int
		UpdatedAt       func(childComplexity int) int
		UserID          func(childComplexity int) int
	}

	CatalogFilter struct {
		CatalogData func(childComplexity int) int
		CreatedAt   func(childComplexity int) int
		FilterFile  func(childComplexity int) int
		ID          func(childComplexity int) int
		Location    func(childComplexity int) int
		Name        func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
		UserID      func(childComplexity int) int
		Visibility  func(childComplexity int) int
	}

	CatalogPattern struct {
		CatalogData func(childComplexity int) int
		CreatedAt   func(childComplexity int) int
		ID          func(childComplexity int) int
		Location    func(childComplexity int) int
		Name        func(childComplexity int) int
		PatternFile func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
		UserID      func(childComplexity int) int
		Visibility  func(childComplexity int) int
	}

	ClusterResources struct {
		Resources func(childComplexity int) int
	}

	ConfigurationPage struct {
		Applications func(childComplexity int) int
		Filters      func(childComplexity int) int
		Patterns     func(childComplexity int) int
	}

	Container struct {
		ContainerName          func(childComplexity int) int
		ControlPlaneMemberName func(childComplexity int) int
		Image                  func(childComplexity int) int
		Ports                  func(childComplexity int) int
		Resources              func(childComplexity int) int
		Status                 func(childComplexity int) int
	}

	Container_Port struct {
		ContainerPort func(childComplexity int) int
		Name          func(childComplexity int) int
		Protocol      func(childComplexity int) int
	}

	Container_Status struct {
		ContainerID         func(childComplexity int) int
		ContainerStatusName func(childComplexity int) int
		Image               func(childComplexity int) int
		ImageID             func(childComplexity int) int
		LastState           func(childComplexity int) int
		Ready               func(childComplexity int) int
		RestartCount        func(childComplexity int) int
		Started             func(childComplexity int) int
		State               func(childComplexity int) int
	}

	ControlPlane struct {
		Members func(childComplexity int) int
		Name    func(childComplexity int) int
	}

	ControlPlaneMember struct {
		Component  func(childComplexity int) int
		DataPlanes func(childComplexity int) int
		Name       func(childComplexity int) int
		Namespace  func(childComplexity int) int
		Version    func(childComplexity int) int
	}

	DataPlane struct {
		Name    func(childComplexity int) int
		Proxies func(childComplexity int) int
	}

	Error struct {
		Code        func(childComplexity int) int
		Description func(childComplexity int) int
	}

	FilterPage struct {
		Filters    func(childComplexity int) int
		Page       func(childComplexity int) int
		PageSize   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	FilterResult struct {
		CatalogData func(childComplexity int) int
		CreatedAt   func(childComplexity int) int
		FilterFile  func(childComplexity int) int
		ID          func(childComplexity int) int
		Location    func(childComplexity int) int
		Name        func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
		UserID      func(childComplexity int) int
		Visibility  func(childComplexity int) int
	}

	KubectlDescribeDetails struct {
		ContextID func(childComplexity int) int
		Describe  func(childComplexity int) int
	}

	KubernetesContext struct {
		Auth               func(childComplexity int) int
		Cluster            func(childComplexity int) int
		CreatedAt          func(childComplexity int) int
		CreatedBy          func(childComplexity int) int
		DeploymentType     func(childComplexity int) int
		ID                 func(childComplexity int) int
		KubernetesServerID func(childComplexity int) int
		MesheryInstanceID  func(childComplexity int) int
		Name               func(childComplexity int) int
		Owner              func(childComplexity int) int
		Server             func(childComplexity int) int
		UpdatedAt          func(childComplexity int) int
	}

	KubernetesContextsPage struct {
		Contexts   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	Location struct {
		Branch func(childComplexity int) int
		Host   func(childComplexity int) int
		Path   func(childComplexity int) int
		Type   func(childComplexity int) int
	}

	MeshSyncEvent struct {
		ContextID func(childComplexity int) int
		Object    func(childComplexity int) int
		Type      func(childComplexity int) int
	}

	MesheryControllersStatusListItem struct {
		ContextID  func(childComplexity int) int
		Controller func(childComplexity int) int
		Status     func(childComplexity int) int
	}

	MesheryResult struct {
		CreatedAt          func(childComplexity int) int
		Mesh               func(childComplexity int) int
		MesheryID          func(childComplexity int) int
		Name               func(childComplexity int) int
		PerformanceProfile func(childComplexity int) int
		RunnerResults      func(childComplexity int) int
		ServerBoardConfig  func(childComplexity int) int
		ServerMetrics      func(childComplexity int) int
		TestID             func(childComplexity int) int
		TestStartTime      func(childComplexity int) int
		UpdatedAt          func(childComplexity int) int
		UserID             func(childComplexity int) int
	}

	NameSpace struct {
		Namespace func(childComplexity int) int
	}

	NullString struct {
		String func(childComplexity int) int
		Valid  func(childComplexity int) int
	}

	OAMCapability struct {
		Host          func(childComplexity int) int
		ID            func(childComplexity int) int
		Metadata      func(childComplexity int) int
		OamDefinition func(childComplexity int) int
		OamRefSchema  func(childComplexity int) int
		Restricted    func(childComplexity int) int
	}

	OperatorControllerStatus struct {
		ContextID func(childComplexity int) int
		Error     func(childComplexity int) int
		Name      func(childComplexity int) int
		Status    func(childComplexity int) int
		Version   func(childComplexity int) int
	}

	OperatorControllerStatusPerKubernetesContext struct {
		ContextID                func(childComplexity int) int
		OperatorControllerStatus func(childComplexity int) int
	}

	OperatorStatus struct {
		ContextID   func(childComplexity int) int
		Controllers func(childComplexity int) int
		Error       func(childComplexity int) int
		Status      func(childComplexity int) int
		Version     func(childComplexity int) int
	}

	OperatorStatusInput struct {
		ContextID    func(childComplexity int) int
		TargetStatus func(childComplexity int) int
	}

	OperatorStatusPerKubernetesContext struct {
		ContextID      func(childComplexity int) int
		OperatorStatus func(childComplexity int) int
	}

	PatternPage struct {
		CanSupport  func(childComplexity int) int
		CatalogData func(childComplexity int) int
		CreatedAt   func(childComplexity int) int
		Errmsg      func(childComplexity int) int
		ID          func(childComplexity int) int
		Location    func(childComplexity int) int
		Name        func(childComplexity int) int
		PatternFile func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
		UserID      func(childComplexity int) int
		Visibility  func(childComplexity int) int
	}

	PatternPageResult struct {
		Page       func(childComplexity int) int
		PageSize   func(childComplexity int) int
		Patterns   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	PatternResult struct {
		CanSupport  func(childComplexity int) int
		CatalogData func(childComplexity int) int
		CreatedAt   func(childComplexity int) int
		Errmsg      func(childComplexity int) int
		ID          func(childComplexity int) int
		Location    func(childComplexity int) int
		Name        func(childComplexity int) int
		PatternFile func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
		UserID      func(childComplexity int) int
		Visibility  func(childComplexity int) int
	}

	PerfPageProfiles struct {
		Page       func(childComplexity int) int
		PageSize   func(childComplexity int) int
		Profiles   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	PerfPageResult struct {
		Page       func(childComplexity int) int
		PageSize   func(childComplexity int) int
		Results    func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	PerfProfile struct {
		ConcurrentRequest func(childComplexity int) int
		ContentType       func(childComplexity int) int
		CreatedAt         func(childComplexity int) int
		Duration          func(childComplexity int) int
		Endpoints         func(childComplexity int) int
		ID                func(childComplexity int) int
		LastRun           func(childComplexity int) int
		LoadGenerators    func(childComplexity int) int
		Name              func(childComplexity int) int
		QPS               func(childComplexity int) int
		RequestBody       func(childComplexity int) int
		RequestCookies    func(childComplexity int) int
		RequestHeaders    func(childComplexity int) int
		ServiceMesh       func(childComplexity int) int
		TotalResults      func(childComplexity int) int
		UpdatedAt         func(childComplexity int) int
		UserID            func(childComplexity int) int
	}

	Query struct {
		ConnectToNats              func(childComplexity int, kubernetesContextID string) int
		DeployMeshsync             func(childComplexity int, kubernetesContextID string) int
		FetchAllResults            func(childComplexity int, selector customTypes.PageFilter) int
		FetchFilterCatalogContent  func(childComplexity int, selector *customTypes.CatalogSelector) int
		FetchPatternCatalogContent func(childComplexity int, selector *customTypes.CatalogSelector) int
		FetchPatterns              func(childComplexity int, selector customTypes.PageFilter) int
		FetchResults               func(childComplexity int, selector customTypes.PageFilter, profileID string) int
		GetAvailableAddons         func(childComplexity int, filter *customTypes.ServiceMeshFilter) int
		GetAvailableNamespaces     func(childComplexity int, k8sclusterIds []string) int
		GetClusterResources        func(childComplexity int, kubernetesContextIDs []string, namespace string) int
		GetControlPlanes           func(childComplexity int, filter *customTypes.ServiceMeshFilter) int
		GetDataPlanes              func(childComplexity int, filter *customTypes.ServiceMeshFilter) int
		GetKubectlDescribe         func(childComplexity int, name string, kind string, namespace string) int
		GetMeshsyncStatus          func(childComplexity int, kubernetesContextID string) int
		GetNatsStatus              func(childComplexity int, kubernetesContextID string) int
		GetOperatorStatus          func(childComplexity int, kubernetesContextID string) int
		GetPerfResult              func(childComplexity int, id string) int
		GetPerformanceProfiles     func(childComplexity int, selector customTypes.PageFilter) int
		GetScopes                  func(childComplexity int, name *string, id *string, trim *bool) int
		GetTraits                  func(childComplexity int, name *string, id *string, trim *bool) int
		GetWorkloads               func(childComplexity int, name *string, id *string, trim *bool) int
		ResyncCluster              func(childComplexity int, selector *customTypes.ResyncActions, kubernetesContextID string) int
	}

	Resource struct {
		Count func(childComplexity int) int
		Kind  func(childComplexity int) int
	}

	Subscription struct {
		ListenToAddonState                func(childComplexity int, filter *customTypes.ServiceMeshFilter) int
		ListenToControlPlaneState         func(childComplexity int, filter *customTypes.ServiceMeshFilter) int
		ListenToDataPlaneState            func(childComplexity int, filter *customTypes.ServiceMeshFilter) int
		ListenToMeshSyncEvents            func(childComplexity int, kubernetesContextIDs []string) int
		ListenToOperatorState             func(childComplexity int, kubernetesContextIDs []string) int
		SubscribeBrokerConnection         func(childComplexity int) int
		SubscribeClusterResources         func(childComplexity int, kubernetesContextIDs []string, namespace string) int
		SubscribeConfiguration            func(childComplexity int, applicationSelector customTypes.PageFilter, patternSelector customTypes.PageFilter, filterSelector customTypes.PageFilter) int
		SubscribeK8sContext               func(childComplexity int, selector customTypes.PageFilter) int
		SubscribeMeshSyncEvents           func(childComplexity int, kubernetesContextIDs []string) int
		SubscribeMesheryControllersStatus func(childComplexity int, kubernetesContextIDs []string) int
		SubscribePerfProfiles             func(childComplexity int, selector customTypes.PageFilter) int
		SubscribePerfResults              func(childComplexity int, selector customTypes.PageFilter, profileID string) int
	}
}

type QueryResolver interface {
	GetAvailableAddons(ctx context.Context, filter *customTypes.ServiceMeshFilter) ([]*customTypes.AddonList, error)
	GetControlPlanes(ctx context.Context, filter *customTypes.ServiceMeshFilter) ([]*customTypes.ControlPlane, error)
	GetDataPlanes(ctx context.Context, filter *customTypes.ServiceMeshFilter) ([]*customTypes.DataPlane, error)
	GetOperatorStatus(ctx context.Context, kubernetesContextID string) (*customTypes.OperatorStatus, error)
	ResyncCluster(ctx context.Context, selector *customTypes.ResyncActions, kubernetesContextID string) (customTypes.Status, error)
	GetMeshsyncStatus(ctx context.Context, kubernetesContextID string) (*customTypes.OperatorControllerStatus, error)
	DeployMeshsync(ctx context.Context, kubernetesContextID string) (customTypes.Status, error)
	GetNatsStatus(ctx context.Context, kubernetesContextID string) (*customTypes.OperatorControllerStatus, error)
	ConnectToNats(ctx context.Context, kubernetesContextID string) (customTypes.Status, error)
	GetAvailableNamespaces(ctx context.Context, k8sclusterIds []string) ([]*customTypes.NameSpace, error)
	GetPerfResult(ctx context.Context, id string) (*customTypes.MesheryResult, error)
	FetchResults(ctx context.Context, selector customTypes.PageFilter, profileID string) (*customTypes.PerfPageResult, error)
	GetPerformanceProfiles(ctx context.Context, selector customTypes.PageFilter) (*customTypes.PerfPageProfiles, error)
	FetchAllResults(ctx context.Context, selector customTypes.PageFilter) (*customTypes.PerfPageResult, error)
	FetchPatterns(ctx context.Context, selector customTypes.PageFilter) (*customTypes.PatternPageResult, error)
	GetWorkloads(ctx context.Context, name *string, id *string, trim *bool) ([]*customTypes.OAMCapability, error)
	GetTraits(ctx context.Context, name *string, id *string, trim *bool) ([]*customTypes.OAMCapability, error)
	GetScopes(ctx context.Context, name *string, id *string, trim *bool) ([]*customTypes.OAMCapability, error)
	GetKubectlDescribe(ctx context.Context, name string, kind string, namespace string) (*customTypes.KubectlDescribeDetails, error)
	FetchPatternCatalogContent(ctx context.Context, selector *customTypes.CatalogSelector) ([]*customTypes.CatalogPattern, error)
	FetchFilterCatalogContent(ctx context.Context, selector *customTypes.CatalogSelector) ([]*customTypes.CatalogFilter, error)
	GetClusterResources(ctx context.Context, kubernetesContextIDs []string, namespace string) (*customTypes.ClusterResources, error)
}
type SubscriptionResolver interface {
	ListenToAddonState(ctx context.Context, filter *customTypes.ServiceMeshFilter) (<-chan []*customTypes.AddonList, error)
	ListenToControlPlaneState(ctx context.Context, filter *customTypes.ServiceMeshFilter) (<-chan []*customTypes.ControlPlane, error)
	ListenToDataPlaneState(ctx context.Context, filter *customTypes.ServiceMeshFilter) (<-chan []*customTypes.DataPlane, error)
	ListenToOperatorState(ctx context.Context, kubernetesContextIDs []string) (<-chan *customTypes.OperatorStatusPerKubernetesContext, error)
	ListenToMeshSyncEvents(ctx context.Context, kubernetesContextIDs []string) (<-chan *customTypes.OperatorControllerStatusPerKubernetesContext, error)
	SubscribePerfProfiles(ctx context.Context, selector customTypes.PageFilter) (<-chan *customTypes.PerfPageProfiles, error)
	SubscribePerfResults(ctx context.Context, selector customTypes.PageFilter, profileID string) (<-chan *customTypes.PerfPageResult, error)
	SubscribeBrokerConnection(ctx context.Context) (<-chan bool, error)
	SubscribeMesheryControllersStatus(ctx context.Context, kubernetesContextIDs []string) (<-chan []*customTypes.MesheryControllersStatusListItem, error)
	SubscribeMeshSyncEvents(ctx context.Context, kubernetesContextIDs []string) (<-chan *customTypes.MeshSyncEvent, error)
	SubscribeConfiguration(ctx context.Context, applicationSelector customTypes.PageFilter, patternSelector customTypes.PageFilter, filterSelector customTypes.PageFilter) (<-chan *customTypes.ConfigurationPage, error)
	SubscribeClusterResources(ctx context.Context, kubernetesContextIDs []string, namespace string) (<-chan *customTypes.ClusterResources, error)
	SubscribeK8sContext(ctx context.Context, selector customTypes.PageFilter) (<-chan *customTypes.KubernetesContextsPage, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "AddonList.name":
		if e.complexity.AddonList.Name == nil {
			break
		}

		return e.complexity.AddonList.Name(childComplexity), true

	case "AddonList.owner":
		if e.complexity.AddonList.Owner == nil {
			break
		}

		return e.complexity.AddonList.Owner(childComplexity), true

	case "ApplicationPage.applications":
		if e.complexity.ApplicationPage.Applications == nil {
			break
		}

		return e.complexity.ApplicationPage.Applications(childComplexity), true

	case "ApplicationPage.page":
		if e.complexity.ApplicationPage.Page == nil {
			break
		}

		return e.complexity.ApplicationPage.Page(childComplexity), true

	case "ApplicationPage.pageSize":
		if e.complexity.ApplicationPage.PageSize == nil {
			break
		}

		return e.complexity.ApplicationPage.PageSize(childComplexity), true

	case "ApplicationPage.totalCount":
		if e.complexity.ApplicationPage.TotalCount == nil {
			break
		}

		return e.complexity.ApplicationPage.TotalCount(childComplexity), true

	case "ApplicationResult.applicationFile":
		if e.complexity.ApplicationResult.ApplicationFile == nil {
			break
		}

		return e.complexity.ApplicationResult.ApplicationFile(childComplexity), true

	case "ApplicationResult.createdAt":
		if e.complexity.ApplicationResult.CreatedAt == nil {
			break
		}

		return e.complexity.ApplicationResult.CreatedAt(childComplexity), true

	case "ApplicationResult.id":
		if e.complexity.ApplicationResult.ID == nil {
			break
		}

		return e.complexity.ApplicationResult.ID(childComplexity), true

	case "ApplicationResult.location":
		if e.complexity.ApplicationResult.Location == nil {
			break
		}

		return e.complexity.ApplicationResult.Location(childComplexity), true

	case "ApplicationResult.name":
		if e.complexity.ApplicationResult.Name == nil {
			break
		}

		return e.complexity.ApplicationResult.Name(childComplexity), true

	case "ApplicationResult.type":
		if e.complexity.ApplicationResult.Type == nil {
			break
		}

		return e.complexity.ApplicationResult.Type(childComplexity), true

	case "ApplicationResult.updatedAt":
		if e.complexity.ApplicationResult.UpdatedAt == nil {
			break
		}

		return e.complexity.ApplicationResult.UpdatedAt(childComplexity), true

	case "ApplicationResult.userID":
		if e.complexity.ApplicationResult.UserID == nil {
			break
		}

		return e.complexity.ApplicationResult.UserID(childComplexity), true

	case "CatalogFilter.catalogData":
		if e.complexity.CatalogFilter.CatalogData == nil {
			break
		}

		return e.complexity.CatalogFilter.CatalogData(childComplexity), true

	case "CatalogFilter.createdAt":
		if e.complexity.CatalogFilter.CreatedAt == nil {
			break
		}

		return e.complexity.CatalogFilter.CreatedAt(childComplexity), true

	case "CatalogFilter.filterFile":
		if e.complexity.CatalogFilter.FilterFile == nil {
			break
		}

		return e.complexity.CatalogFilter.FilterFile(childComplexity), true

	case "CatalogFilter.id":
		if e.complexity.CatalogFilter.ID == nil {
			break
		}

		return e.complexity.CatalogFilter.ID(childComplexity), true

	case "CatalogFilter.location":
		if e.complexity.CatalogFilter.Location == nil {
			break
		}

		return e.complexity.CatalogFilter.Location(childComplexity), true

	case "CatalogFilter.name":
		if e.complexity.CatalogFilter.Name == nil {
			break
		}

		return e.complexity.CatalogFilter.Name(childComplexity), true

	case "CatalogFilter.updatedAt":
		if e.complexity.CatalogFilter.UpdatedAt == nil {
			break
		}

		return e.complexity.CatalogFilter.UpdatedAt(childComplexity), true

	case "CatalogFilter.userID":
		if e.complexity.CatalogFilter.UserID == nil {
			break
		}

		return e.complexity.CatalogFilter.UserID(childComplexity), true

	case "CatalogFilter.visibility":
		if e.complexity.CatalogFilter.Visibility == nil {
			break
		}

		return e.complexity.CatalogFilter.Visibility(childComplexity), true

	case "CatalogPattern.catalogData":
		if e.complexity.CatalogPattern.CatalogData == nil {
			break
		}

		return e.complexity.CatalogPattern.CatalogData(childComplexity), true

	case "CatalogPattern.createdAt":
		if e.complexity.CatalogPattern.CreatedAt == nil {
			break
		}

		return e.complexity.CatalogPattern.CreatedAt(childComplexity), true

	case "CatalogPattern.id":
		if e.complexity.CatalogPattern.ID == nil {
			break
		}

		return e.complexity.CatalogPattern.ID(childComplexity), true

	case "CatalogPattern.location":
		if e.complexity.CatalogPattern.Location == nil {
			break
		}

		return e.complexity.CatalogPattern.Location(childComplexity), true

	case "CatalogPattern.name":
		if e.complexity.CatalogPattern.Name == nil {
			break
		}

		return e.complexity.CatalogPattern.Name(childComplexity), true

	case "CatalogPattern.patternFile":
		if e.complexity.CatalogPattern.PatternFile == nil {
			break
		}

		return e.complexity.CatalogPattern.PatternFile(childComplexity), true

	case "CatalogPattern.updatedAt":
		if e.complexity.CatalogPattern.UpdatedAt == nil {
			break
		}

		return e.complexity.CatalogPattern.UpdatedAt(childComplexity), true

	case "CatalogPattern.userID":
		if e.complexity.CatalogPattern.UserID == nil {
			break
		}

		return e.complexity.CatalogPattern.UserID(childComplexity), true

	case "CatalogPattern.visibility":
		if e.complexity.CatalogPattern.Visibility == nil {
			break
		}

		return e.complexity.CatalogPattern.Visibility(childComplexity), true

	case "ClusterResources.resources":
		if e.complexity.ClusterResources.Resources == nil {
			break
		}

		return e.complexity.ClusterResources.Resources(childComplexity), true

	case "ConfigurationPage.applications":
		if e.complexity.ConfigurationPage.Applications == nil {
			break
		}

		return e.complexity.ConfigurationPage.Applications(childComplexity), true

	case "ConfigurationPage.filters":
		if e.complexity.ConfigurationPage.Filters == nil {
			break
		}

		return e.complexity.ConfigurationPage.Filters(childComplexity), true

	case "ConfigurationPage.patterns":
		if e.complexity.ConfigurationPage.Patterns == nil {
			break
		}

		return e.complexity.ConfigurationPage.Patterns(childComplexity), true

	case "Container.containerName":
		if e.complexity.Container.ContainerName == nil {
			break
		}

		return e.complexity.Container.ContainerName(childComplexity), true

	case "Container.controlPlaneMemberName":
		if e.complexity.Container.ControlPlaneMemberName == nil {
			break
		}

		return e.complexity.Container.ControlPlaneMemberName(childComplexity), true

	case "Container.image":
		if e.complexity.Container.Image == nil {
			break
		}

		return e.complexity.Container.Image(childComplexity), true

	case "Container.ports":
		if e.complexity.Container.Ports == nil {
			break
		}

		return e.complexity.Container.Ports(childComplexity), true

	case "Container.resources":
		if e.complexity.Container.Resources == nil {
			break
		}

		return e.complexity.Container.Resources(childComplexity), true

	case "Container.status":
		if e.complexity.Container.Status == nil {
			break
		}

		return e.complexity.Container.Status(childComplexity), true

	case "Container_Port.containerPort":
		if e.complexity.Container_Port.ContainerPort == nil {
			break
		}

		return e.complexity.Container_Port.ContainerPort(childComplexity), true

	case "Container_Port.name":
		if e.complexity.Container_Port.Name == nil {
			break
		}

		return e.complexity.Container_Port.Name(childComplexity), true

	case "Container_Port.protocol":
		if e.complexity.Container_Port.Protocol == nil {
			break
		}

		return e.complexity.Container_Port.Protocol(childComplexity), true

	case "Container_Status.containerId":
		if e.complexity.Container_Status.ContainerID == nil {
			break
		}

		return e.complexity.Container_Status.ContainerID(childComplexity), true

	case "Container_Status.containerStatusName":
		if e.complexity.Container_Status.ContainerStatusName == nil {
			break
		}

		return e.complexity.Container_Status.ContainerStatusName(childComplexity), true

	case "Container_Status.image":
		if e.complexity.Container_Status.Image == nil {
			break
		}

		return e.complexity.Container_Status.Image(childComplexity), true

	case "Container_Status.imageId":
		if e.complexity.Container_Status.ImageID == nil {
			break
		}

		return e.complexity.Container_Status.ImageID(childComplexity), true

	case "Container_Status.lastState":
		if e.complexity.Container_Status.LastState == nil {
			break
		}

		return e.complexity.Container_Status.LastState(childComplexity), true

	case "Container_Status.ready":
		if e.complexity.Container_Status.Ready == nil {
			break
		}

		return e.complexity.Container_Status.Ready(childComplexity), true

	case "Container_Status.restartCount":
		if e.complexity.Container_Status.RestartCount == nil {
			break
		}

		return e.complexity.Container_Status.RestartCount(childComplexity), true

	case "Container_Status.started":
		if e.complexity.Container_Status.Started == nil {
			break
		}

		return e.complexity.Container_Status.Started(childComplexity), true

	case "Container_Status.state":
		if e.complexity.Container_Status.State == nil {
			break
		}

		return e.complexity.Container_Status.State(childComplexity), true

	case "ControlPlane.members":
		if e.complexity.ControlPlane.Members == nil {
			break
		}

		return e.complexity.ControlPlane.Members(childComplexity), true

	case "ControlPlane.name":
		if e.complexity.ControlPlane.Name == nil {
			break
		}

		return e.complexity.ControlPlane.Name(childComplexity), true

	case "ControlPlaneMember.component":
		if e.complexity.ControlPlaneMember.Component == nil {
			break
		}

		return e.complexity.ControlPlaneMember.Component(childComplexity), true

	case "ControlPlaneMember.data_planes":
		if e.complexity.ControlPlaneMember.DataPlanes == nil {
			break
		}

		return e.complexity.ControlPlaneMember.DataPlanes(childComplexity), true

	case "ControlPlaneMember.name":
		if e.complexity.ControlPlaneMember.Name == nil {
			break
		}

		return e.complexity.ControlPlaneMember.Name(childComplexity), true

	case "ControlPlaneMember.namespace":
		if e.complexity.ControlPlaneMember.Namespace == nil {
			break
		}

		return e.complexity.ControlPlaneMember.Namespace(childComplexity), true

	case "ControlPlaneMember.version":
		if e.complexity.ControlPlaneMember.Version == nil {
			break
		}

		return e.complexity.ControlPlaneMember.Version(childComplexity), true

	case "DataPlane.Name":
		if e.complexity.DataPlane.Name == nil {
			break
		}

		return e.complexity.DataPlane.Name(childComplexity), true

	case "DataPlane.proxies":
		if e.complexity.DataPlane.Proxies == nil {
			break
		}

		return e.complexity.DataPlane.Proxies(childComplexity), true

	case "Error.code":
		if e.complexity.Error.Code == nil {
			break
		}

		return e.complexity.Error.Code(childComplexity), true

	case "Error.description":
		if e.complexity.Error.Description == nil {
			break
		}

		return e.complexity.Error.Description(childComplexity), true

	case "FilterPage.filters":
		if e.complexity.FilterPage.Filters == nil {
			break
		}

		return e.complexity.FilterPage.Filters(childComplexity), true

	case "FilterPage.page":
		if e.complexity.FilterPage.Page == nil {
			break
		}

		return e.complexity.FilterPage.Page(childComplexity), true

	case "FilterPage.pageSize":
		if e.complexity.FilterPage.PageSize == nil {
			break
		}

		return e.complexity.FilterPage.PageSize(childComplexity), true

	case "FilterPage.totalCount":
		if e.complexity.FilterPage.TotalCount == nil {
			break
		}

		return e.complexity.FilterPage.TotalCount(childComplexity), true

	case "FilterResult.catalogData":
		if e.complexity.FilterResult.CatalogData == nil {
			break
		}

		return e.complexity.FilterResult.CatalogData(childComplexity), true

	case "FilterResult.createdAt":
		if e.complexity.FilterResult.CreatedAt == nil {
			break
		}

		return e.complexity.FilterResult.CreatedAt(childComplexity), true

	case "FilterResult.filterFile":
		if e.complexity.FilterResult.FilterFile == nil {
			break
		}

		return e.complexity.FilterResult.FilterFile(childComplexity), true

	case "FilterResult.id":
		if e.complexity.FilterResult.ID == nil {
			break
		}

		return e.complexity.FilterResult.ID(childComplexity), true

	case "FilterResult.location":
		if e.complexity.FilterResult.Location == nil {
			break
		}

		return e.complexity.FilterResult.Location(childComplexity), true

	case "FilterResult.name":
		if e.complexity.FilterResult.Name == nil {
			break
		}

		return e.complexity.FilterResult.Name(childComplexity), true

	case "FilterResult.updatedAt":
		if e.complexity.FilterResult.UpdatedAt == nil {
			break
		}

		return e.complexity.FilterResult.UpdatedAt(childComplexity), true

	case "FilterResult.userID":
		if e.complexity.FilterResult.UserID == nil {
			break
		}

		return e.complexity.FilterResult.UserID(childComplexity), true

	case "FilterResult.visibility":
		if e.complexity.FilterResult.Visibility == nil {
			break
		}

		return e.complexity.FilterResult.Visibility(childComplexity), true

	case "KubectlDescribeDetails.contextID":
		if e.complexity.KubectlDescribeDetails.ContextID == nil {
			break
		}

		return e.complexity.KubectlDescribeDetails.ContextID(childComplexity), true

	case "KubectlDescribeDetails.describe":
		if e.complexity.KubectlDescribeDetails.Describe == nil {
			break
		}

		return e.complexity.KubectlDescribeDetails.Describe(childComplexity), true

	case "KubernetesContext.auth":
		if e.complexity.KubernetesContext.Auth == nil {
			break
		}

		return e.complexity.KubernetesContext.Auth(childComplexity), true

	case "KubernetesContext.cluster":
		if e.complexity.KubernetesContext.Cluster == nil {
			break
		}

		return e.complexity.KubernetesContext.Cluster(childComplexity), true

	case "KubernetesContext.createdAt":
		if e.complexity.KubernetesContext.CreatedAt == nil {
			break
		}

		return e.complexity.KubernetesContext.CreatedAt(childComplexity), true

	case "KubernetesContext.createdBy":
		if e.complexity.KubernetesContext.CreatedBy == nil {
			break
		}

		return e.complexity.KubernetesContext.CreatedBy(childComplexity), true

	case "KubernetesContext.deploymentType":
		if e.complexity.KubernetesContext.DeploymentType == nil {
			break
		}

		return e.complexity.KubernetesContext.DeploymentType(childComplexity), true

	case "KubernetesContext.id":
		if e.complexity.KubernetesContext.ID == nil {
			break
		}

		return e.complexity.KubernetesContext.ID(childComplexity), true

	case "KubernetesContext.kubernetesServerID":
		if e.complexity.KubernetesContext.KubernetesServerID == nil {
			break
		}

		return e.complexity.KubernetesContext.KubernetesServerID(childComplexity), true

	case "KubernetesContext.mesheryInstanceID":
		if e.complexity.KubernetesContext.MesheryInstanceID == nil {
			break
		}

		return e.complexity.KubernetesContext.MesheryInstanceID(childComplexity), true

	case "KubernetesContext.name":
		if e.complexity.KubernetesContext.Name == nil {
			break
		}

		return e.complexity.KubernetesContext.Name(childComplexity), true

	case "KubernetesContext.owner":
		if e.complexity.KubernetesContext.Owner == nil {
			break
		}

		return e.complexity.KubernetesContext.Owner(childComplexity), true

	case "KubernetesContext.server":
		if e.complexity.KubernetesContext.Server == nil {
			break
		}

		return e.complexity.KubernetesContext.Server(childComplexity), true

	case "KubernetesContext.updatedAt":
		if e.complexity.KubernetesContext.UpdatedAt == nil {
			break
		}

		return e.complexity.KubernetesContext.UpdatedAt(childComplexity), true

	case "KubernetesContextsPage.contexts":
		if e.complexity.KubernetesContextsPage.Contexts == nil {
			break
		}

		return e.complexity.KubernetesContextsPage.Contexts(childComplexity), true

	case "KubernetesContextsPage.totalCount":
		if e.complexity.KubernetesContextsPage.TotalCount == nil {
			break
		}

		return e.complexity.KubernetesContextsPage.TotalCount(childComplexity), true

	case "Location.branch":
		if e.complexity.Location.Branch == nil {
			break
		}

		return e.complexity.Location.Branch(childComplexity), true

	case "Location.host":
		if e.complexity.Location.Host == nil {
			break
		}

		return e.complexity.Location.Host(childComplexity), true

	case "Location.path":
		if e.complexity.Location.Path == nil {
			break
		}

		return e.complexity.Location.Path(childComplexity), true

	case "Location.type":
		if e.complexity.Location.Type == nil {
			break
		}

		return e.complexity.Location.Type(childComplexity), true

	case "MeshSyncEvent.contextID":
		if e.complexity.MeshSyncEvent.ContextID == nil {
			break
		}

		return e.complexity.MeshSyncEvent.ContextID(childComplexity), true

	case "MeshSyncEvent.object":
		if e.complexity.MeshSyncEvent.Object == nil {
			break
		}

		return e.complexity.MeshSyncEvent.Object(childComplexity), true

	case "MeshSyncEvent.type":
		if e.complexity.MeshSyncEvent.Type == nil {
			break
		}

		return e.complexity.MeshSyncEvent.Type(childComplexity), true

	case "MesheryControllersStatusListItem.contextID":
		if e.complexity.MesheryControllersStatusListItem.ContextID == nil {
			break
		}

		return e.complexity.MesheryControllersStatusListItem.ContextID(childComplexity), true

	case "MesheryControllersStatusListItem.controller":
		if e.complexity.MesheryControllersStatusListItem.Controller == nil {
			break
		}

		return e.complexity.MesheryControllersStatusListItem.Controller(childComplexity), true

	case "MesheryControllersStatusListItem.status":
		if e.complexity.MesheryControllersStatusListItem.Status == nil {
			break
		}

		return e.complexity.MesheryControllersStatusListItem.Status(childComplexity), true

	case "MesheryResult.createdAt":
		if e.complexity.MesheryResult.CreatedAt == nil {
			break
		}

		return e.complexity.MesheryResult.CreatedAt(childComplexity), true

	case "MesheryResult.mesh":
		if e.complexity.MesheryResult.Mesh == nil {
			break
		}

		return e.complexity.MesheryResult.Mesh(childComplexity), true

	case "MesheryResult.mesheryID":
		if e.complexity.MesheryResult.MesheryID == nil {
			break
		}

		return e.complexity.MesheryResult.MesheryID(childComplexity), true

	case "MesheryResult.name":
		if e.complexity.MesheryResult.Name == nil {
			break
		}

		return e.complexity.MesheryResult.Name(childComplexity), true

	case "MesheryResult.performanceProfile":
		if e.complexity.MesheryResult.PerformanceProfile == nil {
			break
		}

		return e.complexity.MesheryResult.PerformanceProfile(childComplexity), true

	case "MesheryResult.runnerResults":
		if e.complexity.MesheryResult.RunnerResults == nil {
			break
		}

		return e.complexity.MesheryResult.RunnerResults(childComplexity), true

	case "MesheryResult.serverBoardConfig":
		if e.complexity.MesheryResult.ServerBoardConfig == nil {
			break
		}

		return e.complexity.MesheryResult.ServerBoardConfig(childComplexity), true

	case "MesheryResult.serverMetrics":
		if e.complexity.MesheryResult.ServerMetrics == nil {
			break
		}

		return e.complexity.MesheryResult.ServerMetrics(childComplexity), true

	case "MesheryResult.testID":
		if e.complexity.MesheryResult.TestID == nil {
			break
		}

		return e.complexity.MesheryResult.TestID(childComplexity), true

	case "MesheryResult.testStartTime":
		if e.complexity.MesheryResult.TestStartTime == nil {
			break
		}

		return e.complexity.MesheryResult.TestStartTime(childComplexity), true

	case "MesheryResult.updatedAt":
		if e.complexity.MesheryResult.UpdatedAt == nil {
			break
		}

		return e.complexity.MesheryResult.UpdatedAt(childComplexity), true

	case "MesheryResult.userID":
		if e.complexity.MesheryResult.UserID == nil {
			break
		}

		return e.complexity.MesheryResult.UserID(childComplexity), true

	case "NameSpace.namespace":
		if e.complexity.NameSpace.Namespace == nil {
			break
		}

		return e.complexity.NameSpace.Namespace(childComplexity), true

	case "NullString.String":
		if e.complexity.NullString.String == nil {
			break
		}

		return e.complexity.NullString.String(childComplexity), true

	case "NullString.Valid":
		if e.complexity.NullString.Valid == nil {
			break
		}

		return e.complexity.NullString.Valid(childComplexity), true

	case "OAMCapability.host":
		if e.complexity.OAMCapability.Host == nil {
			break
		}

		return e.complexity.OAMCapability.Host(childComplexity), true

	case "OAMCapability.id":
		if e.complexity.OAMCapability.ID == nil {
			break
		}

		return e.complexity.OAMCapability.ID(childComplexity), true

	case "OAMCapability.metadata":
		if e.complexity.OAMCapability.Metadata == nil {
			break
		}

		return e.complexity.OAMCapability.Metadata(childComplexity), true

	case "OAMCapability.oamDefinition":
		if e.complexity.OAMCapability.OamDefinition == nil {
			break
		}

		return e.complexity.OAMCapability.OamDefinition(childComplexity), true

	case "OAMCapability.oamRefSchema":
		if e.complexity.OAMCapability.OamRefSchema == nil {
			break
		}

		return e.complexity.OAMCapability.OamRefSchema(childComplexity), true

	case "OAMCapability.restricted":
		if e.complexity.OAMCapability.Restricted == nil {
			break
		}

		return e.complexity.OAMCapability.Restricted(childComplexity), true

	case "OperatorControllerStatus.contextID":
		if e.complexity.OperatorControllerStatus.ContextID == nil {
			break
		}

		return e.complexity.OperatorControllerStatus.ContextID(childComplexity), true

	case "OperatorControllerStatus.error":
		if e.complexity.OperatorControllerStatus.Error == nil {
			break
		}

		return e.complexity.OperatorControllerStatus.Error(childComplexity), true

	case "OperatorControllerStatus.name":
		if e.complexity.OperatorControllerStatus.Name == nil {
			break
		}

		return e.complexity.OperatorControllerStatus.Name(childComplexity), true

	case "OperatorControllerStatus.status":
		if e.complexity.OperatorControllerStatus.Status == nil {
			break
		}

		return e.complexity.OperatorControllerStatus.Status(childComplexity), true

	case "OperatorControllerStatus.version":
		if e.complexity.OperatorControllerStatus.Version == nil {
			break
		}

		return e.complexity.OperatorControllerStatus.Version(childComplexity), true

	case "OperatorControllerStatusPerKubernetesContext.contextID":
		if e.complexity.OperatorControllerStatusPerKubernetesContext.ContextID == nil {
			break
		}

		return e.complexity.OperatorControllerStatusPerKubernetesContext.ContextID(childComplexity), true

	case "OperatorControllerStatusPerKubernetesContext.OperatorControllerStatus":
		if e.complexity.OperatorControllerStatusPerKubernetesContext.OperatorControllerStatus == nil {
			break
		}

		return e.complexity.OperatorControllerStatusPerKubernetesContext.OperatorControllerStatus(childComplexity), true

	case "OperatorStatus.contextID":
		if e.complexity.OperatorStatus.ContextID == nil {
			break
		}

		return e.complexity.OperatorStatus.ContextID(childComplexity), true

	case "OperatorStatus.controllers":
		if e.complexity.OperatorStatus.Controllers == nil {
			break
		}

		return e.complexity.OperatorStatus.Controllers(childComplexity), true

	case "OperatorStatus.error":
		if e.complexity.OperatorStatus.Error == nil {
			break
		}

		return e.complexity.OperatorStatus.Error(childComplexity), true

	case "OperatorStatus.status":
		if e.complexity.OperatorStatus.Status == nil {
			break
		}

		return e.complexity.OperatorStatus.Status(childComplexity), true

	case "OperatorStatus.version":
		if e.complexity.OperatorStatus.Version == nil {
			break
		}

		return e.complexity.OperatorStatus.Version(childComplexity), true

	case "OperatorStatusInput.contextID":
		if e.complexity.OperatorStatusInput.ContextID == nil {
			break
		}

		return e.complexity.OperatorStatusInput.ContextID(childComplexity), true

	case "OperatorStatusInput.targetStatus":
		if e.complexity.OperatorStatusInput.TargetStatus == nil {
			break
		}

		return e.complexity.OperatorStatusInput.TargetStatus(childComplexity), true

	case "OperatorStatusPerKubernetesContext.contextID":
		if e.complexity.OperatorStatusPerKubernetesContext.ContextID == nil {
			break
		}

		return e.complexity.OperatorStatusPerKubernetesContext.ContextID(childComplexity), true

	case "OperatorStatusPerKubernetesContext.operatorStatus":
		if e.complexity.OperatorStatusPerKubernetesContext.OperatorStatus == nil {
			break
		}

		return e.complexity.OperatorStatusPerKubernetesContext.OperatorStatus(childComplexity), true

	case "PatternPage.canSupport":
		if e.complexity.PatternPage.CanSupport == nil {
			break
		}

		return e.complexity.PatternPage.CanSupport(childComplexity), true

	case "PatternPage.catalogData":
		if e.complexity.PatternPage.CatalogData == nil {
			break
		}

		return e.complexity.PatternPage.CatalogData(childComplexity), true

	case "PatternPage.createdAt":
		if e.complexity.PatternPage.CreatedAt == nil {
			break
		}

		return e.complexity.PatternPage.CreatedAt(childComplexity), true

	case "PatternPage.errmsg":
		if e.complexity.PatternPage.Errmsg == nil {
			break
		}

		return e.complexity.PatternPage.Errmsg(childComplexity), true

	case "PatternPage.id":
		if e.complexity.PatternPage.ID == nil {
			break
		}

		return e.complexity.PatternPage.ID(childComplexity), true

	case "PatternPage.location":
		if e.complexity.PatternPage.Location == nil {
			break
		}

		return e.complexity.PatternPage.Location(childComplexity), true

	case "PatternPage.name":
		if e.complexity.PatternPage.Name == nil {
			break
		}

		return e.complexity.PatternPage.Name(childComplexity), true

	case "PatternPage.patternFile":
		if e.complexity.PatternPage.PatternFile == nil {
			break
		}

		return e.complexity.PatternPage.PatternFile(childComplexity), true

	case "PatternPage.updatedAt":
		if e.complexity.PatternPage.UpdatedAt == nil {
			break
		}

		return e.complexity.PatternPage.UpdatedAt(childComplexity), true

	case "PatternPage.userID":
		if e.complexity.PatternPage.UserID == nil {
			break
		}

		return e.complexity.PatternPage.UserID(childComplexity), true

	case "PatternPage.visibility":
		if e.complexity.PatternPage.Visibility == nil {
			break
		}

		return e.complexity.PatternPage.Visibility(childComplexity), true

	case "PatternPageResult.page":
		if e.complexity.PatternPageResult.Page == nil {
			break
		}

		return e.complexity.PatternPageResult.Page(childComplexity), true

	case "PatternPageResult.pageSize":
		if e.complexity.PatternPageResult.PageSize == nil {
			break
		}

		return e.complexity.PatternPageResult.PageSize(childComplexity), true

	case "PatternPageResult.patterns":
		if e.complexity.PatternPageResult.Patterns == nil {
			break
		}

		return e.complexity.PatternPageResult.Patterns(childComplexity), true

	case "PatternPageResult.totalCount":
		if e.complexity.PatternPageResult.TotalCount == nil {
			break
		}

		return e.complexity.PatternPageResult.TotalCount(childComplexity), true

	case "PatternResult.canSupport":
		if e.complexity.PatternResult.CanSupport == nil {
			break
		}

		return e.complexity.PatternResult.CanSupport(childComplexity), true

	case "PatternResult.catalogData":
		if e.complexity.PatternResult.CatalogData == nil {
			break
		}

		return e.complexity.PatternResult.CatalogData(childComplexity), true

	case "PatternResult.createdAt":
		if e.complexity.PatternResult.CreatedAt == nil {
			break
		}

		return e.complexity.PatternResult.CreatedAt(childComplexity), true

	case "PatternResult.errmsg":
		if e.complexity.PatternResult.Errmsg == nil {
			break
		}

		return e.complexity.PatternResult.Errmsg(childComplexity), true

	case "PatternResult.id":
		if e.complexity.PatternResult.ID == nil {
			break
		}

		return e.complexity.PatternResult.ID(childComplexity), true

	case "PatternResult.location":
		if e.complexity.PatternResult.Location == nil {
			break
		}

		return e.complexity.PatternResult.Location(childComplexity), true

	case "PatternResult.name":
		if e.complexity.PatternResult.Name == nil {
			break
		}

		return e.complexity.PatternResult.Name(childComplexity), true

	case "PatternResult.patternFile":
		if e.complexity.PatternResult.PatternFile == nil {
			break
		}

		return e.complexity.PatternResult.PatternFile(childComplexity), true

	case "PatternResult.updatedAt":
		if e.complexity.PatternResult.UpdatedAt == nil {
			break
		}

		return e.complexity.PatternResult.UpdatedAt(childComplexity), true

	case "PatternResult.userID":
		if e.complexity.PatternResult.UserID == nil {
			break
		}

		return e.complexity.PatternResult.UserID(childComplexity), true

	case "PatternResult.visibility":
		if e.complexity.PatternResult.Visibility == nil {
			break
		}

		return e.complexity.PatternResult.Visibility(childComplexity), true

	case "PerfPageProfiles.page":
		if e.complexity.PerfPageProfiles.Page == nil {
			break
		}

		return e.complexity.PerfPageProfiles.Page(childComplexity), true

	case "PerfPageProfiles.pageSize":
		if e.complexity.PerfPageProfiles.PageSize == nil {
			break
		}

		return e.complexity.PerfPageProfiles.PageSize(childComplexity), true

	case "PerfPageProfiles.profiles":
		if e.complexity.PerfPageProfiles.Profiles == nil {
			break
		}

		return e.complexity.PerfPageProfiles.Profiles(childComplexity), true

	case "PerfPageProfiles.totalCount":
		if e.complexity.PerfPageProfiles.TotalCount == nil {
			break
		}

		return e.complexity.PerfPageProfiles.TotalCount(childComplexity), true

	case "PerfPageResult.page":
		if e.complexity.PerfPageResult.Page == nil {
			break
		}

		return e.complexity.PerfPageResult.Page(childComplexity), true

	case "PerfPageResult.pageSize":
		if e.complexity.PerfPageResult.PageSize == nil {
			break
		}

		return e.complexity.PerfPageResult.PageSize(childComplexity), true

	case "PerfPageResult.results":
		if e.complexity.PerfPageResult.Results == nil {
			break
		}

		return e.complexity.PerfPageResult.Results(childComplexity), true

	case "PerfPageResult.totalCount":
		if e.complexity.PerfPageResult.TotalCount == nil {
			break
		}

		return e.complexity.PerfPageResult.TotalCount(childComplexity), true

	case "PerfProfile.concurrentRequest":
		if e.complexity.PerfProfile.ConcurrentRequest == nil {
			break
		}

		return e.complexity.PerfProfile.ConcurrentRequest(childComplexity), true

	case "PerfProfile.content_type":
		if e.complexity.PerfProfile.ContentType == nil {
			break
		}

		return e.complexity.PerfProfile.ContentType(childComplexity), true

	case "PerfProfile.createdAt":
		if e.complexity.PerfProfile.CreatedAt == nil {
			break
		}

		return e.complexity.PerfProfile.CreatedAt(childComplexity), true

	case "PerfProfile.duration":
		if e.complexity.PerfProfile.Duration == nil {
			break
		}

		return e.complexity.PerfProfile.Duration(childComplexity), true

	case "PerfProfile.endpoints":
		if e.complexity.PerfProfile.Endpoints == nil {
			break
		}

		return e.complexity.PerfProfile.Endpoints(childComplexity), true

	case "PerfProfile.id":
		if e.complexity.PerfProfile.ID == nil {
			break
		}

		return e.complexity.PerfProfile.ID(childComplexity), true

	case "PerfProfile.lastRun":
		if e.complexity.PerfProfile.LastRun == nil {
			break
		}

		return e.complexity.PerfProfile.LastRun(childComplexity), true

	case "PerfProfile.loadGenerators":
		if e.complexity.PerfProfile.LoadGenerators == nil {
			break
		}

		return e.complexity.PerfProfile.LoadGenerators(childComplexity), true

	case "PerfProfile.name":
		if e.complexity.PerfProfile.Name == nil {
			break
		}

		return e.complexity.PerfProfile.Name(childComplexity), true

	case "PerfProfile.qps":
		if e.complexity.PerfProfile.QPS == nil {
			break
		}

		return e.complexity.PerfProfile.QPS(childComplexity), true

	case "PerfProfile.request_body":
		if e.complexity.PerfProfile.RequestBody == nil {
			break
		}

		return e.complexity.PerfProfile.RequestBody(childComplexity), true

	case "PerfProfile.request_cookies":
		if e.complexity.PerfProfile.RequestCookies == nil {
			break
		}

		return e.complexity.PerfProfile.RequestCookies(childComplexity), true

	case "PerfProfile.request_headers":
		if e.complexity.PerfProfile.RequestHeaders == nil {
			break
		}

		return e.complexity.PerfProfile.RequestHeaders(childComplexity), true

	case "PerfProfile.service_mesh":
		if e.complexity.PerfProfile.ServiceMesh == nil {
			break
		}

		return e.complexity.PerfProfile.ServiceMesh(childComplexity), true

	case "PerfProfile.totalResults":
		if e.complexity.PerfProfile.TotalResults == nil {
			break
		}

		return e.complexity.PerfProfile.TotalResults(childComplexity), true

	case "PerfProfile.updatedAt":
		if e.complexity.PerfProfile.UpdatedAt == nil {
			break
		}

		return e.complexity.PerfProfile.UpdatedAt(childComplexity), true

	case "PerfProfile.userID":
		if e.complexity.PerfProfile.UserID == nil {
			break
		}

		return e.complexity.PerfProfile.UserID(childComplexity), true

	case "Query.connectToNats":
		if e.complexity.Query.ConnectToNats == nil {
			break
		}

		args, err := ec.field_Query_connectToNats_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ConnectToNats(childComplexity, args["kubernetesContextID"].(string)), true

	case "Query.deployMeshsync":
		if e.complexity.Query.DeployMeshsync == nil {
			break
		}

		args, err := ec.field_Query_deployMeshsync_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DeployMeshsync(childComplexity, args["kubernetesContextID"].(string)), true

	case "Query.fetchAllResults":
		if e.complexity.Query.FetchAllResults == nil {
			break
		}

		args, err := ec.field_Query_fetchAllResults_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FetchAllResults(childComplexity, args["selector"].(customTypes.PageFilter)), true

	case "Query.fetchFilterCatalogContent":
		if e.complexity.Query.FetchFilterCatalogContent == nil {
			break
		}

		args, err := ec.field_Query_fetchFilterCatalogContent_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FetchFilterCatalogContent(childComplexity, args["selector"].(*customTypes.CatalogSelector)), true

	case "Query.fetchPatternCatalogContent":
		if e.complexity.Query.FetchPatternCatalogContent == nil {
			break
		}

		args, err := ec.field_Query_fetchPatternCatalogContent_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FetchPatternCatalogContent(childComplexity, args["selector"].(*customTypes.CatalogSelector)), true

	case "Query.fetchPatterns":
		if e.complexity.Query.FetchPatterns == nil {
			break
		}

		args, err := ec.field_Query_fetchPatterns_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FetchPatterns(childComplexity, args["selector"].(customTypes.PageFilter)), true

	case "Query.fetchResults":
		if e.complexity.Query.FetchResults == nil {
			break
		}

		args, err := ec.field_Query_fetchResults_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FetchResults(childComplexity, args["selector"].(customTypes.PageFilter), args["profileID"].(string)), true

	case "Query.getAvailableAddons":
		if e.complexity.Query.GetAvailableAddons == nil {
			break
		}

		args, err := ec.field_Query_getAvailableAddons_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetAvailableAddons(childComplexity, args["filter"].(*customTypes.ServiceMeshFilter)), true

	case "Query.getAvailableNamespaces":
		if e.complexity.Query.GetAvailableNamespaces == nil {
			break
		}

		args, err := ec.field_Query_getAvailableNamespaces_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetAvailableNamespaces(childComplexity, args["k8sclusterIds"].([]string)), true

	case "Query.getClusterResources":
		if e.complexity.Query.GetClusterResources == nil {
			break
		}

		args, err := ec.field_Query_getClusterResources_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetClusterResources(childComplexity, args["kubernetesContextIDs"].([]string), args["namespace"].(string)), true

	case "Query.getControlPlanes":
		if e.complexity.Query.GetControlPlanes == nil {
			break
		}

		args, err := ec.field_Query_getControlPlanes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetControlPlanes(childComplexity, args["filter"].(*customTypes.ServiceMeshFilter)), true

	case "Query.getDataPlanes":
		if e.complexity.Query.GetDataPlanes == nil {
			break
		}

		args, err := ec.field_Query_getDataPlanes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetDataPlanes(childComplexity, args["filter"].(*customTypes.ServiceMeshFilter)), true

	case "Query.getKubectlDescribe":
		if e.complexity.Query.GetKubectlDescribe == nil {
			break
		}

		args, err := ec.field_Query_getKubectlDescribe_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetKubectlDescribe(childComplexity, args["name"].(string), args["kind"].(string), args["namespace"].(string)), true

	case "Query.getMeshsyncStatus":
		if e.complexity.Query.GetMeshsyncStatus == nil {
			break
		}

		args, err := ec.field_Query_getMeshsyncStatus_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetMeshsyncStatus(childComplexity, args["kubernetesContextID"].(string)), true

	case "Query.getNatsStatus":
		if e.complexity.Query.GetNatsStatus == nil {
			break
		}

		args, err := ec.field_Query_getNatsStatus_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetNatsStatus(childComplexity, args["kubernetesContextID"].(string)), true

	case "Query.getOperatorStatus":
		if e.complexity.Query.GetOperatorStatus == nil {
			break
		}

		args, err := ec.field_Query_getOperatorStatus_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetOperatorStatus(childComplexity, args["kubernetesContextID"].(string)), true

	case "Query.getPerfResult":
		if e.complexity.Query.GetPerfResult == nil {
			break
		}

		args, err := ec.field_Query_getPerfResult_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetPerfResult(childComplexity, args["id"].(string)), true

	case "Query.getPerformanceProfiles":
		if e.complexity.Query.GetPerformanceProfiles == nil {
			break
		}

		args, err := ec.field_Query_getPerformanceProfiles_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetPerformanceProfiles(childComplexity, args["selector"].(customTypes.PageFilter)), true

	case "Query.getScopes":
		if e.complexity.Query.GetScopes == nil {
			break
		}

		args, err := ec.field_Query_getScopes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetScopes(childComplexity, args["name"].(*string), args["id"].(*string), args["trim"].(*bool)), true

	case "Query.getTraits":
		if e.complexity.Query.GetTraits == nil {
			break
		}

		args, err := ec.field_Query_getTraits_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetTraits(childComplexity, args["name"].(*string), args["id"].(*string), args["trim"].(*bool)), true

	case "Query.getWorkloads":
		if e.complexity.Query.GetWorkloads == nil {
			break
		}

		args, err := ec.field_Query_getWorkloads_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetWorkloads(childComplexity, args["name"].(*string), args["id"].(*string), args["trim"].(*bool)), true

	case "Query.resyncCluster":
		if e.complexity.Query.ResyncCluster == nil {
			break
		}

		args, err := ec.field_Query_resyncCluster_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ResyncCluster(childComplexity, args["selector"].(*customTypes.ResyncActions), args["kubernetesContextID"].(string)), true

	case "Resource.count":
		if e.complexity.Resource.Count == nil {
			break
		}

		return e.complexity.Resource.Count(childComplexity), true

	case "Resource.kind":
		if e.complexity.Resource.Kind == nil {
			break
		}

		return e.complexity.Resource.Kind(childComplexity), true

	case "Subscription.listenToAddonState":
		if e.complexity.Subscription.ListenToAddonState == nil {
			break
		}

		args, err := ec.field_Subscription_listenToAddonState_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.ListenToAddonState(childComplexity, args["filter"].(*customTypes.ServiceMeshFilter)), true

	case "Subscription.listenToControlPlaneState":
		if e.complexity.Subscription.ListenToControlPlaneState == nil {
			break
		}

		args, err := ec.field_Subscription_listenToControlPlaneState_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.ListenToControlPlaneState(childComplexity, args["filter"].(*customTypes.ServiceMeshFilter)), true

	case "Subscription.listenToDataPlaneState":
		if e.complexity.Subscription.ListenToDataPlaneState == nil {
			break
		}

		args, err := ec.field_Subscription_listenToDataPlaneState_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.ListenToDataPlaneState(childComplexity, args["filter"].(*customTypes.ServiceMeshFilter)), true

	case "Subscription.listenToMeshSyncEvents":
		if e.complexity.Subscription.ListenToMeshSyncEvents == nil {
			break
		}

		args, err := ec.field_Subscription_listenToMeshSyncEvents_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.ListenToMeshSyncEvents(childComplexity, args["kubernetesContextIDs"].([]string)), true

	case "Subscription.listenToOperatorState":
		if e.complexity.Subscription.ListenToOperatorState == nil {
			break
		}

		args, err := ec.field_Subscription_listenToOperatorState_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.ListenToOperatorState(childComplexity, args["kubernetesContextIDs"].([]string)), true

	case "Subscription.subscribeBrokerConnection":
		if e.complexity.Subscription.SubscribeBrokerConnection == nil {
			break
		}

		return e.complexity.Subscription.SubscribeBrokerConnection(childComplexity), true

	case "Subscription.subscribeClusterResources":
		if e.complexity.Subscription.SubscribeClusterResources == nil {
			break
		}

		args, err := ec.field_Subscription_subscribeClusterResources_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.SubscribeClusterResources(childComplexity, args["kubernetesContextIDs"].([]string), args["namespace"].(string)), true

	case "Subscription.subscribeConfiguration":
		if e.complexity.Subscription.SubscribeConfiguration == nil {
			break
		}

		args, err := ec.field_Subscription_subscribeConfiguration_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.SubscribeConfiguration(childComplexity, args["applicationSelector"].(customTypes.PageFilter), args["patternSelector"].(customTypes.PageFilter), args["filterSelector"].(customTypes.PageFilter)), true

	case "Subscription.subscribeK8sContext":
		if e.complexity.Subscription.SubscribeK8sContext == nil {
			break
		}

		args, err := ec.field_Subscription_subscribeK8sContext_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.SubscribeK8sContext(childComplexity, args["selector"].(customTypes.PageFilter)), true

	case "Subscription.subscribeMeshSyncEvents":
		if e.complexity.Subscription.SubscribeMeshSyncEvents == nil {
			break
		}

		args, err := ec.field_Subscription_subscribeMeshSyncEvents_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.SubscribeMeshSyncEvents(childComplexity, args["kubernetesContextIDs"].([]string)), true

	case "Subscription.subscribeMesheryControllersStatus":
		if e.complexity.Subscription.SubscribeMesheryControllersStatus == nil {
			break
		}

		args, err := ec.field_Subscription_subscribeMesheryControllersStatus_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.SubscribeMesheryControllersStatus(childComplexity, args["kubernetesContextIDs"].([]string)), true

	case "Subscription.subscribePerfProfiles":
		if e.complexity.Subscription.SubscribePerfProfiles == nil {
			break
		}

		args, err := ec.field_Subscription_subscribePerfProfiles_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.SubscribePerfProfiles(childComplexity, args["selector"].(customTypes.PageFilter)), true

	case "Subscription.subscribePerfResults":
		if e.complexity.Subscription.SubscribePerfResults == nil {
			break
		}

		args, err := ec.field_Subscription_subscribePerfResults_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.SubscribePerfResults(childComplexity, args["selector"].(customTypes.PageFilter), args["profileID"].(string)), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputAddonStatusInput,
		ec.unmarshalInputCatalogSelector,
		ec.unmarshalInputPageFilter,
		ec.unmarshalInputResyncActions,
		ec.unmarshalInputServiceMeshFilter,
	)
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Subscription:
		next := ec._Subscription(ctx, rc.Operation.SelectionSet)

		var buf bytes.Buffer
		return func(ctx context.Context) *graphql.Response {
			buf.Reset()
			data := next(ctx)

			if data == nil {
				return nil
			}
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "../typeDefinitions/addons.gql", Input: `"""
Add Ons
"""
type AddonList {
    name: String!
    owner: String!
}

input AddonStatusInput {
    selector: MeshType
    kubernetesContextID: String!
    targetStatus: Status!
}`, BuiltIn: false},
	{Name: "../typeDefinitions/applications.gql", Input: `"""
Applications
"""
type ApplicationResult {
    id: ID!
    name: String!
    applicationFile: String!
    type: NullString!
    userID: String!
    location: Location!
    createdAt: String
    updatedAt: String
}

type ApplicationPage {
    page: Int!
    pageSize: Int!
    totalCount: Int!
    applications: [ApplicationResult]
}`, BuiltIn: false},
	{Name: "../typeDefinitions/catalog.gql", Input: `"""
Catalog
"""
type CatalogFilter {
    id: ID!
    name: String!
    filterFile: String!
    userID: String!
    location: Location!
    visibility: String!
    catalogData: Map
    createdAt: String
    updatedAt: String
}

type CatalogPattern {
    id: ID!
    name: String!
    userID: String!
    patternFile: String!
    location: Location!
    visibility: String!
    catalogData: Map
    createdAt: String
    updatedAt: String
}

input CatalogSelector {
    search: String!
    order: String!
}`, BuiltIn: false},
	{Name: "../typeDefinitions/common.gql", Input: `"""
Maps an arbitrary GraphQL value to a map[string]interface{} Go type.
"""
scalar Map

"""
Maps a Time GraphQL scalar to a Go time.Time struct. This scalar adheres to the time.RFC3339Nano format.
"""
scalar Time

"""
Maps an arbitrary GraphQL value to a interface{} Go type.
"""
scalar Any

"""
MeshType indicates the type of Service Mesh
"""
enum MeshType {
    ALL_MESH
    INVALID_MESH
    APP_MESH
    CILIUM_SERVICE_MESH
    CITRIX_SERVICE_MESH
    CONSUL
    ISTIO
    KUMA
    LINKERD
    NETWORK_SERVICE_MESH
    NGINX_SERVICE_MESH
    OCTARINE
    OPEN_SERVICE_MESH
    TANZU
}

enum MesheryController {
    BROKER
    OPERATOR
    MESHSYNC
}

enum MesheryControllerStatus {
    DEPLOYED
    NOTDEPLOYED
    DEPLOYING
    UNKNOWN
}

type MesheryControllersStatusListItem {
    contextID: String!
    controller: MesheryController!
    status: MesheryControllerStatus!
}

type MeshSyncEvent {
    type: String!
    object: Any!
    contextID: String!
}

type MesheryResult {
    mesheryID: String
    name: String
    mesh: String
    performanceProfile: String
    testID: String
    runnerResults: Map
    serverMetrics: Map
    serverBoardConfig: String
    testStartTime: String
    userID: String
    updatedAt: String
    createdAt: String
}

"""
Define Status
"""
enum Status {
    ENABLED
    CONNECTED
    DISABLED
    PROCESSING
    UNKNOWN
}

"""
Define Error
"""
type Error {
    code: String!
    description: String!
}

"""
Define Container
"""
type Container_Status {
    containerStatusName: String!
    image: String!
    state: Any
    lastState: Any
    ready: Boolean!
    restartCount: Any
    started: Boolean!
    imageId: Any
    containerId: Any
}

type Container_Port {
    name: String
    containerPort: Int!
    protocol: String!
}

type Container {
    controlPlaneMemberName: String!
    containerName: String!
    image: String!
    status: Container_Status
    ports: [Container_Port]
    resources: Any
}

"""
Define Namespace
"""
type NameSpace {
    namespace: String!
}

"""
Dashboard
"""
type Resource {
    kind: String!
    count: Int!
}

type ClusterResources {
    resources: [Resource!]!
}

"""
Location
"""
type Location {
    branch: String
    host: String
    path: String
    type: String
}

"""
NullString
"""
type NullString {
    String: String!
    Valid: Boolean
}

input PageFilter {
    page: String!
    pageSize: Int!
    order: String
    search: String
    from: String
    to: String
}

"""
ReSync
"""
input ResyncActions {
    clearDB: String!
    Resync: String!
    hardReset: String!
}

"""
OAM Capbility
"""
type OAMCapability {
    oamDefinition: Any
    id: String
    oamRefSchema: String
    host: String
    restricted: Boolean
    metadata: Any
}

type KubectlDescribeDetails {
  describe: String
  contextID: String
}`, BuiltIn: false},
	{Name: "../typeDefinitions/configuration.gql", Input: `"""
Configuration
"""

type ConfigurationPage {
    applications: ApplicationPage
    patterns: PatternPageResult
    filters: FilterPage
}`, BuiltIn: false},
	{Name: "../typeDefinitions/control_plane.gql", Input: `"""
Service Mesh Filtering
"""
input ServiceMeshFilter {
    type: MeshType
    kubernetesClusterIds: [String!]
}

"""
Control Plane
"""
type ControlPlaneMember {
    name: String!
    component: String!
    version: String!
    namespace: String!
    data_planes: [Container!]
}

type ControlPlane {
    name: String!
    members: [ControlPlaneMember!]!
}`, BuiltIn: false},
	{Name: "../typeDefinitions/data_plane.gql", Input: `"""
Data Plane
"""
type DataPlane {
    Name: String!
    proxies: [Container!]!
}`, BuiltIn: false},
	{Name: "../typeDefinitions/filters.gql", Input: `"""
Filters
"""
type FilterResult {
    id: ID!
    name: String!
    filterFile: String!
    userID: String!
    location: Location!
    visibility: String!
    catalogData: Map
    createdAt: String
    updatedAt: String
}

type FilterPage {
    page: Int!
    pageSize: Int!
    totalCount: Int!
    filters: [FilterResult]
}`, BuiltIn: false},
	{Name: "../typeDefinitions/kubernetes_contexts.gql", Input: `"""
Kubernetes Context
"""
type KubernetesContextsPage {
    totalCount: Int!
    contexts: [KubernetesContext]
}

type KubernetesContext {
    id: String!
    name: String!
    auth: Map!
    cluster: Map!
    server: String!
    owner: ID!
    createdBy: ID!
    mesheryInstanceID: ID!
    kubernetesServerID: ID!
    deploymentType: String!
    updatedAt: String!
    createdAt: String!
}`, BuiltIn: false},
	{Name: "../typeDefinitions/operator.gql", Input: `"""
Operator
"""

type OperatorStatus {
    status: Status!
    version: String!
    controllers: [OperatorControllerStatus!]
    error: Error
    contextID: String!
}

# Meshery Operator status input
type OperatorStatusInput {
    targetStatus: String!
    contextID: String!
}

# Meshery Operator controllers' status
type OperatorControllerStatus {
    name: String!
    version: String!
    status: Status!
    error: Error!
    contextID: String!
}

# Meshery Operator per Kubernetes context status
type OperatorStatusPerKubernetesContext {
    contextID: String!
    operatorStatus: OperatorStatus!
}

# Meshery Operator Controller per Kubernetes context status
type OperatorControllerStatusPerKubernetesContext {
    contextID: String!
    OperatorControllerStatus: OperatorControllerStatus!
}`, BuiltIn: false},
	{Name: "../typeDefinitions/patterns.gql", Input: `"""
Patterns
"""
type PatternPage {
    id: ID!
    name: String!
    userID: String!
    location: Location!
    patternFile: String!
    visibility: String!
    catalogData: Map
    canSupport: Boolean!
    errmsg: String
    createdAt: String
    updatedAt: String
}

type PatternResult {
    id: ID!
    name: String!
    userID: String!
    location: Location!
    patternFile: String!
    visibility: String!
    catalogData: Map
    canSupport: Boolean!
    errmsg: String
    createdAt: String
    updatedAt: String
}

type PatternPageResult {
    page: Int!
    pageSize: Int!
    totalCount: Int!
    patterns: [PatternResult]
}`, BuiltIn: false},
	{Name: "../typeDefinitions/performance.gql", Input: `"""
Performance
"""
type PerfPageResult{
    page: Int!
    pageSize: Int!
    totalCount: Int!
    results: [MesheryResult]
}

type PerfProfile {
    concurrentRequest: Int!
    createdAt: String
    duration: String!
    endpoints: [String]
    id: String!
    lastRun: String
    loadGenerators: String
    name: String
    qps: Int
    totalResults: Int
    updatedAt: String
    userID: String
    request_headers: String
    request_cookies: String
    request_body: String
    content_type: String
    service_mesh: String
}

type PerfPageProfiles {
    page: Int!
    pageSize: Int!
    totalCount: Int!
    profiles: [PerfProfile]
}`, BuiltIn: false},
	{Name: "../typeDefinitions/queries.gql", Input: `"""
Root
"""
type Query {
    # Query details about Addons available (Eg. Prometheus and Grafana)
    getAvailableAddons(
    # Select Mesh Type
        filter: ServiceMeshFilter
    ): [AddonList!]!

    # Query Control Plane data for a Service Mesh (or all) in your cluster
    getControlPlanes(
    # Filter Control Plane Query
    filter: ServiceMeshFilter
    ): [ControlPlane!]!

    # Query Data Plane information for a Service Mesh (or all) in your cluster
    getDataPlanes(
    # Filter Control Plane Query
    filter: ServiceMeshFilter
    ): [DataPlane!]!

    # Query status of Meshery Operator in your cluster
    getOperatorStatus(
        kubernetesContextID: String!
    ): OperatorStatus

    # Query to resync the cluster discovery
    resyncCluster(
    # Selector to control several resync actions
    selector: ResyncActions
    kubernetesContextID: String!
    ): Status!

    # Check the Meshsync Status
    getMeshsyncStatus(
        kubernetesContextID: String!
    ): OperatorControllerStatus!

    # Check the Meshsync Status and deploy if not enabled
    deployMeshsync( # what to do in-order to deploy meshsync on multiple clusters/contexts
        kubernetesContextID: String!
    ): Status!

    # Check is Meshey Server is connected to NATS
    getNatsStatus(
        kubernetesContextID: String!
    ): OperatorControllerStatus!

    # Check is Meshey Server is connected to NATS, if not connect to the NATS Server
    connectToNats(
        kubernetesContextID: String!
    ): Status!

    # Query available Namespaces in your cluster
    getAvailableNamespaces(
        k8sclusterIds: [String!]
    ): [NameSpace!]!

    # Query for performance result
    getPerfResult(id: ID!): MesheryResult

    # Query for fetching all results for profile ID
    fetchResults(selector: PageFilter!, profileID: String!): PerfPageResult!

    # Query for fetching all results for profile ID
    getPerformanceProfiles(selector: PageFilter!): PerfPageProfiles!

    # Query for fetching all results for profile ID
    fetchAllResults(selector: PageFilter!): PerfPageResult!

    # Query for fetching all patterns with selector
    fetchPatterns(selector: PageFilter!): PatternPageResult!

    # Query for getting workloads
    getWorkloads(name: String, id: ID, trim: Boolean): [OAMCapability]
    # Query for getting traits
    getTraits(name: String, id: ID, trim: Boolean): [OAMCapability]
    # Query for getting scopes
    getScopes(name: String, id: ID, trim: Boolean): [OAMCapability]

    # Query for getting kubectl describe details with meshkit 
    getKubectlDescribe(name: String!, kind: String!, namespace: String!): KubectlDescribeDetails!

    # Query for getting Pattern Catalog from remote provider
    fetchPatternCatalogContent(selector: CatalogSelector): [CatalogPattern!]!
    # Query for getting Filter Catalog from remote provider
    fetchFilterCatalogContent(selector: CatalogSelector): [CatalogFilter!]!

    # Query for getting cluster info
    getClusterResources(kubernetesContextIDs: [String!], namespace: String!): ClusterResources!
}`, BuiltIn: false},
	{Name: "../typeDefinitions/subscription.gql", Input: `"""
Subscription
"""
type Subscription {
    # Listen to changes in status of Addons available (Eg. Prometheus and Grafana)
    listenToAddonState(
        # Select Mesh Type
        filter: ServiceMeshFilter
    ): [AddonList!]!

    # Listen to changes in Control Plane data for a Service Mesh (or all) in your cluster
    listenToControlPlaneState(
        # Filter Control Plane Query
        filter: ServiceMeshFilter
    ): [ControlPlane!]!

    # Listen to changes in Data Plane data for a Service Mesh (or all) in your cluster
    listenToDataPlaneState(
        # Filter Control Plane Query
        filter: ServiceMeshFilter
    ): [DataPlane!]!

    # Listen to changes in status of Meshery Operator in your cluster
    listenToOperatorState(
        kubernetesContextIDs: [String!]
    ): OperatorStatusPerKubernetesContext

    # Listen to changes in the list of available Namespaces in your cluster
    listenToMeshSyncEvents(
        kubernetesContextIDs: [String!]
    ): OperatorControllerStatusPerKubernetesContext

    # Listen to changes in Performance Profiles
    subscribePerfProfiles(selector: PageFilter!): PerfPageProfiles!

    # Listen to all results for profile ID
    subscribePerfResults(selector: PageFilter!, profileID: String!): PerfPageResult!

    # Listen to changes in Broker (NATS) Connection
    subscribeBrokerConnection: Boolean!

    # Listen to changes in the status of meshery controllers
    subscribeMesheryControllersStatus(
        kubernetesContextIDs: [String!]
    ): [MesheryControllersStatusListItem!]!

    # Listen to the events that MeshSync is sending through Meshery Broker.
    # Note: It does not listen to the changes in meshery database, but to meshsync events
    subscribeMeshSyncEvents(
        kubernetesContextIDs: [String!]
    ) : MeshSyncEvent!

    subscribeConfiguration(applicationSelector: PageFilter!, patternSelector: PageFilter!, filterSelector: PageFilter!) : ConfigurationPage!

    subscribeClusterResources(
        kubernetesContextIDs: [String!],
        namespace: String!
    ): ClusterResources!

    subscribeK8sContext(selector: PageFilter!) : KubernetesContextsPage!

}`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_connectToNats_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["kubernetesContextID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("kubernetesContextID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["kubernetesContextID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_deployMeshsync_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["kubernetesContextID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("kubernetesContextID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["kubernetesContextID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_fetchAllResults_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 customTypes.PageFilter
	if tmp, ok := rawArgs["selector"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("selector"))
		arg0, err = ec.unmarshalNPageFilter2githubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐPageFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["selector"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_fetchFilterCatalogContent_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *customTypes.CatalogSelector
	if tmp, ok := rawArgs["selector"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("selector"))
		arg0, err = ec.unmarshalOCatalogSelector2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐCatalogSelector(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["selector"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_fetchPatternCatalogContent_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *customTypes.CatalogSelector
	if tmp, ok := rawArgs["selector"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("selector"))
		arg0, err = ec.unmarshalOCatalogSelector2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐCatalogSelector(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["selector"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_fetchPatterns_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 customTypes.PageFilter
	if tmp, ok := rawArgs["selector"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("selector"))
		arg0, err = ec.unmarshalNPageFilter2githubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐPageFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["selector"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_fetchResults_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 customTypes.PageFilter
	if tmp, ok := rawArgs["selector"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("selector"))
		arg0, err = ec.unmarshalNPageFilter2githubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐPageFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["selector"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["profileID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("profileID"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["profileID"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_getAvailableAddons_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *customTypes.ServiceMeshFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOServiceMeshFilter2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐServiceMeshFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getAvailableNamespaces_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["k8sclusterIds"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("k8sclusterIds"))
		arg0, err = ec.unmarshalOString2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["k8sclusterIds"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getClusterResources_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["kubernetesContextIDs"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("kubernetesContextIDs"))
		arg0, err = ec.unmarshalOString2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["kubernetesContextIDs"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["namespace"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("namespace"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["namespace"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_getControlPlanes_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *customTypes.ServiceMeshFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOServiceMeshFilter2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐServiceMeshFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getDataPlanes_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *customTypes.ServiceMeshFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOServiceMeshFilter2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐServiceMeshFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getKubectlDescribe_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["kind"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("kind"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["kind"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["namespace"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("namespace"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["namespace"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_getMeshsyncStatus_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["kubernetesContextID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("kubernetesContextID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["kubernetesContextID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getNatsStatus_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["kubernetesContextID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("kubernetesContextID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["kubernetesContextID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getOperatorStatus_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["kubernetesContextID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("kubernetesContextID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["kubernetesContextID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getPerfResult_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getPerformanceProfiles_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 customTypes.PageFilter
	if tmp, ok := rawArgs["selector"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("selector"))
		arg0, err = ec.unmarshalNPageFilter2githubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐPageFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["selector"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getScopes_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg1, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg1
	var arg2 *bool
	if tmp, ok := rawArgs["trim"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("trim"))
		arg2, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["trim"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_getTraits_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg1, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg1
	var arg2 *bool
	if tmp, ok := rawArgs["trim"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("trim"))
		arg2, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["trim"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_getWorkloads_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg1, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg1
	var arg2 *bool
	if tmp, ok := rawArgs["trim"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("trim"))
		arg2, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["trim"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_resyncCluster_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *customTypes.ResyncActions
	if tmp, ok := rawArgs["selector"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("selector"))
		arg0, err = ec.unmarshalOResyncActions2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐResyncActions(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["selector"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["kubernetesContextID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("kubernetesContextID"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["kubernetesContextID"] = arg1
	return args, nil
}

func (ec *executionContext) field_Subscription_listenToAddonState_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *customTypes.ServiceMeshFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOServiceMeshFilter2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐServiceMeshFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Subscription_listenToControlPlaneState_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *customTypes.ServiceMeshFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOServiceMeshFilter2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐServiceMeshFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Subscription_listenToDataPlaneState_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *customTypes.ServiceMeshFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOServiceMeshFilter2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐServiceMeshFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Subscription_listenToMeshSyncEvents_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["kubernetesContextIDs"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("kubernetesContextIDs"))
		arg0, err = ec.unmarshalOString2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["kubernetesContextIDs"] = arg0
	return args, nil
}

func (ec *executionContext) field_Subscription_listenToOperatorState_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["kubernetesContextIDs"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("kubernetesContextIDs"))
		arg0, err = ec.unmarshalOString2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["kubernetesContextIDs"] = arg0
	return args, nil
}

func (ec *executionContext) field_Subscription_subscribeClusterResources_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["kubernetesContextIDs"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("kubernetesContextIDs"))
		arg0, err = ec.unmarshalOString2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["kubernetesContextIDs"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["namespace"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("namespace"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["namespace"] = arg1
	return args, nil
}

func (ec *executionContext) field_Subscription_subscribeConfiguration_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 customTypes.PageFilter
	if tmp, ok := rawArgs["applicationSelector"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("applicationSelector"))
		arg0, err = ec.unmarshalNPageFilter2githubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐPageFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["applicationSelector"] = arg0
	var arg1 customTypes.PageFilter
	if tmp, ok := rawArgs["patternSelector"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("patternSelector"))
		arg1, err = ec.unmarshalNPageFilter2githubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐPageFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["patternSelector"] = arg1
	var arg2 customTypes.PageFilter
	if tmp, ok := rawArgs["filterSelector"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filterSelector"))
		arg2, err = ec.unmarshalNPageFilter2githubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐPageFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filterSelector"] = arg2
	return args, nil
}

func (ec *executionContext) field_Subscription_subscribeK8sContext_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 customTypes.PageFilter
	if tmp, ok := rawArgs["selector"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("selector"))
		arg0, err = ec.unmarshalNPageFilter2githubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐPageFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["selector"] = arg0
	return args, nil
}

func (ec *executionContext) field_Subscription_subscribeMeshSyncEvents_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["kubernetesContextIDs"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("kubernetesContextIDs"))
		arg0, err = ec.unmarshalOString2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["kubernetesContextIDs"] = arg0
	return args, nil
}

func (ec *executionContext) field_Subscription_subscribeMesheryControllersStatus_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["kubernetesContextIDs"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("kubernetesContextIDs"))
		arg0, err = ec.unmarshalOString2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["kubernetesContextIDs"] = arg0
	return args, nil
}

func (ec *executionContext) field_Subscription_subscribePerfProfiles_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 customTypes.PageFilter
	if tmp, ok := rawArgs["selector"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("selector"))
		arg0, err = ec.unmarshalNPageFilter2githubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐPageFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["selector"] = arg0
	return args, nil
}

func (ec *executionContext) field_Subscription_subscribePerfResults_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 customTypes.PageFilter
	if tmp, ok := rawArgs["selector"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("selector"))
		arg0, err = ec.unmarshalNPageFilter2githubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐPageFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["selector"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["profileID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("profileID"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["profileID"] = arg1
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _AddonList_name(ctx context.Context, field graphql.CollectedField, obj *customTypes.AddonList) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AddonList_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AddonList_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AddonList",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AddonList_owner(ctx context.Context, field graphql.CollectedField, obj *customTypes.AddonList) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AddonList_owner(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Owner, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AddonList_owner(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AddonList",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApplicationPage_page(ctx context.Context, field graphql.CollectedField, obj *customTypes.ApplicationPage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ApplicationPage_page(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Page, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ApplicationPage_page(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApplicationPage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApplicationPage_pageSize(ctx context.Context, field graphql.CollectedField, obj *customTypes.ApplicationPage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ApplicationPage_pageSize(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageSize, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ApplicationPage_pageSize(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApplicationPage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApplicationPage_totalCount(ctx context.Context, field graphql.CollectedField, obj *customTypes.ApplicationPage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ApplicationPage_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ApplicationPage_totalCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApplicationPage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApplicationPage_applications(ctx context.Context, field graphql.CollectedField, obj *customTypes.ApplicationPage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ApplicationPage_applications(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Applications, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*customTypes.ApplicationResult)
	fc.Result = res
	return ec.marshalOApplicationResult2ᚕᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐApplicationResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ApplicationPage_applications(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApplicationPage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ApplicationResult_id(ctx, field)
			case "name":
				return ec.fieldContext_ApplicationResult_name(ctx, field)
			case "applicationFile":
				return ec.fieldContext_ApplicationResult_applicationFile(ctx, field)
			case "type":
				return ec.fieldContext_ApplicationResult_type(ctx, field)
			case "userID":
				return ec.fieldContext_ApplicationResult_userID(ctx, field)
			case "location":
				return ec.fieldContext_ApplicationResult_location(ctx, field)
			case "createdAt":
				return ec.fieldContext_ApplicationResult_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_ApplicationResult_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApplicationResult", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApplicationResult_id(ctx context.Context, field graphql.CollectedField, obj *customTypes.ApplicationResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ApplicationResult_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ApplicationResult_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApplicationResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApplicationResult_name(ctx context.Context, field graphql.CollectedField, obj *customTypes.ApplicationResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ApplicationResult_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ApplicationResult_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApplicationResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApplicationResult_applicationFile(ctx context.Context, field graphql.CollectedField, obj *customTypes.ApplicationResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ApplicationResult_applicationFile(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApplicationFile, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ApplicationResult_applicationFile(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApplicationResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApplicationResult_type(ctx context.Context, field graphql.CollectedField, obj *customTypes.ApplicationResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ApplicationResult_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*customTypes.NullString)
	fc.Result = res
	return ec.marshalNNullString2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐNullString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ApplicationResult_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApplicationResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "String":
				return ec.fieldContext_NullString_String(ctx, field)
			case "Valid":
				return ec.fieldContext_NullString_Valid(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type NullString", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApplicationResult_userID(ctx context.Context, field graphql.CollectedField, obj *customTypes.ApplicationResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ApplicationResult_userID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ApplicationResult_userID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApplicationResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApplicationResult_location(ctx context.Context, field graphql.CollectedField, obj *customTypes.ApplicationResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ApplicationResult_location(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Location, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*customTypes.Location)
	fc.Result = res
	return ec.marshalNLocation2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐLocation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ApplicationResult_location(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApplicationResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "branch":
				return ec.fieldContext_Location_branch(ctx, field)
			case "host":
				return ec.fieldContext_Location_host(ctx, field)
			case "path":
				return ec.fieldContext_Location_path(ctx, field)
			case "type":
				return ec.fieldContext_Location_type(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Location", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApplicationResult_createdAt(ctx context.Context, field graphql.CollectedField, obj *customTypes.ApplicationResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ApplicationResult_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ApplicationResult_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApplicationResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApplicationResult_updatedAt(ctx context.Context, field graphql.CollectedField, obj *customTypes.ApplicationResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ApplicationResult_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ApplicationResult_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApplicationResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CatalogFilter_id(ctx context.Context, field graphql.CollectedField, obj *customTypes.CatalogFilter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CatalogFilter_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CatalogFilter_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CatalogFilter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CatalogFilter_name(ctx context.Context, field graphql.CollectedField, obj *customTypes.CatalogFilter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CatalogFilter_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CatalogFilter_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CatalogFilter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CatalogFilter_filterFile(ctx context.Context, field graphql.CollectedField, obj *customTypes.CatalogFilter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CatalogFilter_filterFile(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FilterFile, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CatalogFilter_filterFile(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CatalogFilter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CatalogFilter_userID(ctx context.Context, field graphql.CollectedField, obj *customTypes.CatalogFilter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CatalogFilter_userID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CatalogFilter_userID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CatalogFilter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CatalogFilter_location(ctx context.Context, field graphql.CollectedField, obj *customTypes.CatalogFilter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CatalogFilter_location(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Location, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*customTypes.Location)
	fc.Result = res
	return ec.marshalNLocation2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐLocation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CatalogFilter_location(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CatalogFilter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "branch":
				return ec.fieldContext_Location_branch(ctx, field)
			case "host":
				return ec.fieldContext_Location_host(ctx, field)
			case "path":
				return ec.fieldContext_Location_path(ctx, field)
			case "type":
				return ec.fieldContext_Location_type(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Location", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CatalogFilter_visibility(ctx context.Context, field graphql.CollectedField, obj *customTypes.CatalogFilter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CatalogFilter_visibility(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Visibility, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CatalogFilter_visibility(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CatalogFilter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CatalogFilter_catalogData(ctx context.Context, field graphql.CollectedField, obj *customTypes.CatalogFilter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CatalogFilter_catalogData(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CatalogData, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(map[string]interface{})
	fc.Result = res
	return ec.marshalOMap2map(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CatalogFilter_catalogData(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CatalogFilter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Map does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CatalogFilter_createdAt(ctx context.Context, field graphql.CollectedField, obj *customTypes.CatalogFilter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CatalogFilter_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CatalogFilter_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CatalogFilter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CatalogFilter_updatedAt(ctx context.Context, field graphql.CollectedField, obj *customTypes.CatalogFilter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CatalogFilter_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CatalogFilter_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CatalogFilter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CatalogPattern_id(ctx context.Context, field graphql.CollectedField, obj *customTypes.CatalogPattern) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CatalogPattern_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CatalogPattern_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CatalogPattern",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CatalogPattern_name(ctx context.Context, field graphql.CollectedField, obj *customTypes.CatalogPattern) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CatalogPattern_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CatalogPattern_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CatalogPattern",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CatalogPattern_userID(ctx context.Context, field graphql.CollectedField, obj *customTypes.CatalogPattern) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CatalogPattern_userID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CatalogPattern_userID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CatalogPattern",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CatalogPattern_patternFile(ctx context.Context, field graphql.CollectedField, obj *customTypes.CatalogPattern) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CatalogPattern_patternFile(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PatternFile, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CatalogPattern_patternFile(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CatalogPattern",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CatalogPattern_location(ctx context.Context, field graphql.CollectedField, obj *customTypes.CatalogPattern) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CatalogPattern_location(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Location, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*customTypes.Location)
	fc.Result = res
	return ec.marshalNLocation2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐLocation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CatalogPattern_location(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CatalogPattern",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "branch":
				return ec.fieldContext_Location_branch(ctx, field)
			case "host":
				return ec.fieldContext_Location_host(ctx, field)
			case "path":
				return ec.fieldContext_Location_path(ctx, field)
			case "type":
				return ec.fieldContext_Location_type(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Location", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CatalogPattern_visibility(ctx context.Context, field graphql.CollectedField, obj *customTypes.CatalogPattern) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CatalogPattern_visibility(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Visibility, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CatalogPattern_visibility(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CatalogPattern",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CatalogPattern_catalogData(ctx context.Context, field graphql.CollectedField, obj *customTypes.CatalogPattern) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CatalogPattern_catalogData(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CatalogData, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(map[string]interface{})
	fc.Result = res
	return ec.marshalOMap2map(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CatalogPattern_catalogData(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CatalogPattern",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Map does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CatalogPattern_createdAt(ctx context.Context, field graphql.CollectedField, obj *customTypes.CatalogPattern) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CatalogPattern_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CatalogPattern_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CatalogPattern",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CatalogPattern_updatedAt(ctx context.Context, field graphql.CollectedField, obj *customTypes.CatalogPattern) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CatalogPattern_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CatalogPattern_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CatalogPattern",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClusterResources_resources(ctx context.Context, field graphql.CollectedField, obj *customTypes.ClusterResources) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClusterResources_resources(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Resources, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*customTypes.Resource)
	fc.Result = res
	return ec.marshalNResource2ᚕᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐResourceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClusterResources_resources(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClusterResources",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext_Resource_kind(ctx, field)
			case "count":
				return ec.fieldContext_Resource_count(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Resource", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigurationPage_applications(ctx context.Context, field graphql.CollectedField, obj *customTypes.ConfigurationPage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigurationPage_applications(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Applications, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*customTypes.ApplicationPage)
	fc.Result = res
	return ec.marshalOApplicationPage2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐApplicationPage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigurationPage_applications(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigurationPage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "page":
				return ec.fieldContext_ApplicationPage_page(ctx, field)
			case "pageSize":
				return ec.fieldContext_ApplicationPage_pageSize(ctx, field)
			case "totalCount":
				return ec.fieldContext_ApplicationPage_totalCount(ctx, field)
			case "applications":
				return ec.fieldContext_ApplicationPage_applications(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApplicationPage", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigurationPage_patterns(ctx context.Context, field graphql.CollectedField, obj *customTypes.ConfigurationPage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigurationPage_patterns(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Patterns, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*customTypes.PatternPageResult)
	fc.Result = res
	return ec.marshalOPatternPageResult2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐPatternPageResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigurationPage_patterns(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigurationPage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "page":
				return ec.fieldContext_PatternPageResult_page(ctx, field)
			case "pageSize":
				return ec.fieldContext_PatternPageResult_pageSize(ctx, field)
			case "totalCount":
				return ec.fieldContext_PatternPageResult_totalCount(ctx, field)
			case "patterns":
				return ec.fieldContext_PatternPageResult_patterns(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PatternPageResult", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConfigurationPage_filters(ctx context.Context, field graphql.CollectedField, obj *customTypes.ConfigurationPage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConfigurationPage_filters(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Filters, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*customTypes.FilterPage)
	fc.Result = res
	return ec.marshalOFilterPage2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐFilterPage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConfigurationPage_filters(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConfigurationPage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "page":
				return ec.fieldContext_FilterPage_page(ctx, field)
			case "pageSize":
				return ec.fieldContext_FilterPage_pageSize(ctx, field)
			case "totalCount":
				return ec.fieldContext_FilterPage_totalCount(ctx, field)
			case "filters":
				return ec.fieldContext_FilterPage_filters(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FilterPage", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Container_controlPlaneMemberName(ctx context.Context, field graphql.CollectedField, obj *customTypes.Container) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Container_controlPlaneMemberName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ControlPlaneMemberName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Container_controlPlaneMemberName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Container",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Container_containerName(ctx context.Context, field graphql.CollectedField, obj *customTypes.Container) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Container_containerName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContainerName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Container_containerName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Container",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Container_image(ctx context.Context, field graphql.CollectedField, obj *customTypes.Container) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Container_image(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Image, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Container_image(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Container",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Container_status(ctx context.Context, field graphql.CollectedField, obj *customTypes.Container) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Container_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*customTypes.ContainerStatus)
	fc.Result = res
	return ec.marshalOContainer_Status2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐContainerStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Container_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Container",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "containerStatusName":
				return ec.fieldContext_Container_Status_containerStatusName(ctx, field)
			case "image":
				return ec.fieldContext_Container_Status_image(ctx, field)
			case "state":
				return ec.fieldContext_Container_Status_state(ctx, field)
			case "lastState":
				return ec.fieldContext_Container_Status_lastState(ctx, field)
			case "ready":
				return ec.fieldContext_Container_Status_ready(ctx, field)
			case "restartCount":
				return ec.fieldContext_Container_Status_restartCount(ctx, field)
			case "started":
				return ec.fieldContext_Container_Status_started(ctx, field)
			case "imageId":
				return ec.fieldContext_Container_Status_imageId(ctx, field)
			case "containerId":
				return ec.fieldContext_Container_Status_containerId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Container_Status", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Container_ports(ctx context.Context, field graphql.CollectedField, obj *customTypes.Container) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Container_ports(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ports, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*customTypes.ContainerPort)
	fc.Result = res
	return ec.marshalOContainer_Port2ᚕᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐContainerPort(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Container_ports(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Container",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_Container_Port_name(ctx, field)
			case "containerPort":
				return ec.fieldContext_Container_Port_containerPort(ctx, field)
			case "protocol":
				return ec.fieldContext_Container_Port_protocol(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Container_Port", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Container_resources(ctx context.Context, field graphql.CollectedField, obj *customTypes.Container) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Container_resources(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Resources, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(interface{})
	fc.Result = res
	return ec.marshalOAny2interface(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Container_resources(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Container",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Any does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Container_Port_name(ctx context.Context, field graphql.CollectedField, obj *customTypes.ContainerPort) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Container_Port_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Container_Port_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Container_Port",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Container_Port_containerPort(ctx context.Context, field graphql.CollectedField, obj *customTypes.ContainerPort) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Container_Port_containerPort(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContainerPort, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Container_Port_containerPort(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Container_Port",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Container_Port_protocol(ctx context.Context, field graphql.CollectedField, obj *customTypes.ContainerPort) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Container_Port_protocol(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Protocol, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Container_Port_protocol(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Container_Port",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Container_Status_containerStatusName(ctx context.Context, field graphql.CollectedField, obj *customTypes.ContainerStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Container_Status_containerStatusName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContainerStatusName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Container_Status_containerStatusName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Container_Status",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Container_Status_image(ctx context.Context, field graphql.CollectedField, obj *customTypes.ContainerStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Container_Status_image(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Image, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Container_Status_image(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Container_Status",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Container_Status_state(ctx context.Context, field graphql.CollectedField, obj *customTypes.ContainerStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Container_Status_state(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(interface{})
	fc.Result = res
	return ec.marshalOAny2interface(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Container_Status_state(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Container_Status",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Any does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Container_Status_lastState(ctx context.Context, field graphql.CollectedField, obj *customTypes.ContainerStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Container_Status_lastState(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(interface{})
	fc.Result = res
	return ec.marshalOAny2interface(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Container_Status_lastState(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Container_Status",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Any does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Container_Status_ready(ctx context.Context, field graphql.CollectedField, obj *customTypes.ContainerStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Container_Status_ready(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ready, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Container_Status_ready(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Container_Status",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Container_Status_restartCount(ctx context.Context, field graphql.CollectedField, obj *customTypes.ContainerStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Container_Status_restartCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RestartCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(interface{})
	fc.Result = res
	return ec.marshalOAny2interface(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Container_Status_restartCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Container_Status",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Any does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Container_Status_started(ctx context.Context, field graphql.CollectedField, obj *customTypes.ContainerStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Container_Status_started(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Started, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Container_Status_started(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Container_Status",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Container_Status_imageId(ctx context.Context, field graphql.CollectedField, obj *customTypes.ContainerStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Container_Status_imageId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ImageID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(interface{})
	fc.Result = res
	return ec.marshalOAny2interface(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Container_Status_imageId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Container_Status",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Any does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Container_Status_containerId(ctx context.Context, field graphql.CollectedField, obj *customTypes.ContainerStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Container_Status_containerId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContainerID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(interface{})
	fc.Result = res
	return ec.marshalOAny2interface(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Container_Status_containerId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Container_Status",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Any does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ControlPlane_name(ctx context.Context, field graphql.CollectedField, obj *customTypes.ControlPlane) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ControlPlane_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ControlPlane_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ControlPlane",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ControlPlane_members(ctx context.Context, field graphql.CollectedField, obj *customTypes.ControlPlane) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ControlPlane_members(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Members, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*customTypes.ControlPlaneMember)
	fc.Result = res
	return ec.marshalNControlPlaneMember2ᚕᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐControlPlaneMemberᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ControlPlane_members(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ControlPlane",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_ControlPlaneMember_name(ctx, field)
			case "component":
				return ec.fieldContext_ControlPlaneMember_component(ctx, field)
			case "version":
				return ec.fieldContext_ControlPlaneMember_version(ctx, field)
			case "namespace":
				return ec.fieldContext_ControlPlaneMember_namespace(ctx, field)
			case "data_planes":
				return ec.fieldContext_ControlPlaneMember_data_planes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ControlPlaneMember", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ControlPlaneMember_name(ctx context.Context, field graphql.CollectedField, obj *customTypes.ControlPlaneMember) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ControlPlaneMember_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ControlPlaneMember_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ControlPlaneMember",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ControlPlaneMember_component(ctx context.Context, field graphql.CollectedField, obj *customTypes.ControlPlaneMember) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ControlPlaneMember_component(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Component, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ControlPlaneMember_component(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ControlPlaneMember",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ControlPlaneMember_version(ctx context.Context, field graphql.CollectedField, obj *customTypes.ControlPlaneMember) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ControlPlaneMember_version(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ControlPlaneMember_version(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ControlPlaneMember",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ControlPlaneMember_namespace(ctx context.Context, field graphql.CollectedField, obj *customTypes.ControlPlaneMember) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ControlPlaneMember_namespace(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Namespace, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ControlPlaneMember_namespace(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ControlPlaneMember",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ControlPlaneMember_data_planes(ctx context.Context, field graphql.CollectedField, obj *customTypes.ControlPlaneMember) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ControlPlaneMember_data_planes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DataPlanes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*customTypes.Container)
	fc.Result = res
	return ec.marshalOContainer2ᚕᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐContainerᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ControlPlaneMember_data_planes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ControlPlaneMember",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "controlPlaneMemberName":
				return ec.fieldContext_Container_controlPlaneMemberName(ctx, field)
			case "containerName":
				return ec.fieldContext_Container_containerName(ctx, field)
			case "image":
				return ec.fieldContext_Container_image(ctx, field)
			case "status":
				return ec.fieldContext_Container_status(ctx, field)
			case "ports":
				return ec.fieldContext_Container_ports(ctx, field)
			case "resources":
				return ec.fieldContext_Container_resources(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Container", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DataPlane_Name(ctx context.Context, field graphql.CollectedField, obj *customTypes.DataPlane) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DataPlane_Name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DataPlane_Name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DataPlane",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DataPlane_proxies(ctx context.Context, field graphql.CollectedField, obj *customTypes.DataPlane) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DataPlane_proxies(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Proxies, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*customTypes.Container)
	fc.Result = res
	return ec.marshalNContainer2ᚕᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐContainerᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DataPlane_proxies(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DataPlane",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "controlPlaneMemberName":
				return ec.fieldContext_Container_controlPlaneMemberName(ctx, field)
			case "containerName":
				return ec.fieldContext_Container_containerName(ctx, field)
			case "image":
				return ec.fieldContext_Container_image(ctx, field)
			case "status":
				return ec.fieldContext_Container_status(ctx, field)
			case "ports":
				return ec.fieldContext_Container_ports(ctx, field)
			case "resources":
				return ec.fieldContext_Container_resources(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Container", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Error_code(ctx context.Context, field graphql.CollectedField, obj *customTypes.Error) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Error_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Error_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Error",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Error_description(ctx context.Context, field graphql.CollectedField, obj *customTypes.Error) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Error_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Error_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Error",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FilterPage_page(ctx context.Context, field graphql.CollectedField, obj *customTypes.FilterPage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FilterPage_page(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Page, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FilterPage_page(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FilterPage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FilterPage_pageSize(ctx context.Context, field graphql.CollectedField, obj *customTypes.FilterPage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FilterPage_pageSize(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageSize, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FilterPage_pageSize(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FilterPage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FilterPage_totalCount(ctx context.Context, field graphql.CollectedField, obj *customTypes.FilterPage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FilterPage_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FilterPage_totalCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FilterPage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FilterPage_filters(ctx context.Context, field graphql.CollectedField, obj *customTypes.FilterPage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FilterPage_filters(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Filters, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*customTypes.FilterResult)
	fc.Result = res
	return ec.marshalOFilterResult2ᚕᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐFilterResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FilterPage_filters(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FilterPage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_FilterResult_id(ctx, field)
			case "name":
				return ec.fieldContext_FilterResult_name(ctx, field)
			case "filterFile":
				return ec.fieldContext_FilterResult_filterFile(ctx, field)
			case "userID":
				return ec.fieldContext_FilterResult_userID(ctx, field)
			case "location":
				return ec.fieldContext_FilterResult_location(ctx, field)
			case "visibility":
				return ec.fieldContext_FilterResult_visibility(ctx, field)
			case "catalogData":
				return ec.fieldContext_FilterResult_catalogData(ctx, field)
			case "createdAt":
				return ec.fieldContext_FilterResult_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_FilterResult_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FilterResult", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _FilterResult_id(ctx context.Context, field graphql.CollectedField, obj *customTypes.FilterResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FilterResult_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FilterResult_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FilterResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FilterResult_name(ctx context.Context, field graphql.CollectedField, obj *customTypes.FilterResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FilterResult_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FilterResult_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FilterResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FilterResult_filterFile(ctx context.Context, field graphql.CollectedField, obj *customTypes.FilterResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FilterResult_filterFile(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FilterFile, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FilterResult_filterFile(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FilterResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FilterResult_userID(ctx context.Context, field graphql.CollectedField, obj *customTypes.FilterResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FilterResult_userID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FilterResult_userID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FilterResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FilterResult_location(ctx context.Context, field graphql.CollectedField, obj *customTypes.FilterResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FilterResult_location(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Location, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*customTypes.Location)
	fc.Result = res
	return ec.marshalNLocation2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐLocation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FilterResult_location(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FilterResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "branch":
				return ec.fieldContext_Location_branch(ctx, field)
			case "host":
				return ec.fieldContext_Location_host(ctx, field)
			case "path":
				return ec.fieldContext_Location_path(ctx, field)
			case "type":
				return ec.fieldContext_Location_type(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Location", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _FilterResult_visibility(ctx context.Context, field graphql.CollectedField, obj *customTypes.FilterResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FilterResult_visibility(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Visibility, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FilterResult_visibility(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FilterResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FilterResult_catalogData(ctx context.Context, field graphql.CollectedField, obj *customTypes.FilterResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FilterResult_catalogData(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CatalogData, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(map[string]interface{})
	fc.Result = res
	return ec.marshalOMap2map(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FilterResult_catalogData(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FilterResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Map does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FilterResult_createdAt(ctx context.Context, field graphql.CollectedField, obj *customTypes.FilterResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FilterResult_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FilterResult_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FilterResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FilterResult_updatedAt(ctx context.Context, field graphql.CollectedField, obj *customTypes.FilterResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FilterResult_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FilterResult_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FilterResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _KubectlDescribeDetails_describe(ctx context.Context, field graphql.CollectedField, obj *customTypes.KubectlDescribeDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_KubectlDescribeDetails_describe(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Describe, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_KubectlDescribeDetails_describe(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "KubectlDescribeDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _KubectlDescribeDetails_contextID(ctx context.Context, field graphql.CollectedField, obj *customTypes.KubectlDescribeDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_KubectlDescribeDetails_contextID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContextID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_KubectlDescribeDetails_contextID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "KubectlDescribeDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _KubernetesContext_id(ctx context.Context, field graphql.CollectedField, obj *customTypes.KubernetesContext) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_KubernetesContext_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_KubernetesContext_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "KubernetesContext",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _KubernetesContext_name(ctx context.Context, field graphql.CollectedField, obj *customTypes.KubernetesContext) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_KubernetesContext_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_KubernetesContext_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "KubernetesContext",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _KubernetesContext_auth(ctx context.Context, field graphql.CollectedField, obj *customTypes.KubernetesContext) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_KubernetesContext_auth(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Auth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(map[string]interface{})
	fc.Result = res
	return ec.marshalNMap2map(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_KubernetesContext_auth(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "KubernetesContext",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Map does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _KubernetesContext_cluster(ctx context.Context, field graphql.CollectedField, obj *customTypes.KubernetesContext) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_KubernetesContext_cluster(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cluster, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(map[string]interface{})
	fc.Result = res
	return ec.marshalNMap2map(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_KubernetesContext_cluster(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "KubernetesContext",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Map does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _KubernetesContext_server(ctx context.Context, field graphql.CollectedField, obj *customTypes.KubernetesContext) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_KubernetesContext_server(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Server, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_KubernetesContext_server(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "KubernetesContext",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _KubernetesContext_owner(ctx context.Context, field graphql.CollectedField, obj *customTypes.KubernetesContext) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_KubernetesContext_owner(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Owner, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_KubernetesContext_owner(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "KubernetesContext",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _KubernetesContext_createdBy(ctx context.Context, field graphql.CollectedField, obj *customTypes.KubernetesContext) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_KubernetesContext_createdBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_KubernetesContext_createdBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "KubernetesContext",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _KubernetesContext_mesheryInstanceID(ctx context.Context, field graphql.CollectedField, obj *customTypes.KubernetesContext) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_KubernetesContext_mesheryInstanceID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MesheryInstanceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_KubernetesContext_mesheryInstanceID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "KubernetesContext",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _KubernetesContext_kubernetesServerID(ctx context.Context, field graphql.CollectedField, obj *customTypes.KubernetesContext) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_KubernetesContext_kubernetesServerID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KubernetesServerID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_KubernetesContext_kubernetesServerID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "KubernetesContext",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _KubernetesContext_deploymentType(ctx context.Context, field graphql.CollectedField, obj *customTypes.KubernetesContext) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_KubernetesContext_deploymentType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeploymentType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_KubernetesContext_deploymentType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "KubernetesContext",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _KubernetesContext_updatedAt(ctx context.Context, field graphql.CollectedField, obj *customTypes.KubernetesContext) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_KubernetesContext_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_KubernetesContext_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "KubernetesContext",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _KubernetesContext_createdAt(ctx context.Context, field graphql.CollectedField, obj *customTypes.KubernetesContext) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_KubernetesContext_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_KubernetesContext_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "KubernetesContext",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _KubernetesContextsPage_totalCount(ctx context.Context, field graphql.CollectedField, obj *customTypes.KubernetesContextsPage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_KubernetesContextsPage_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_KubernetesContextsPage_totalCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "KubernetesContextsPage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _KubernetesContextsPage_contexts(ctx context.Context, field graphql.CollectedField, obj *customTypes.KubernetesContextsPage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_KubernetesContextsPage_contexts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Contexts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*customTypes.KubernetesContext)
	fc.Result = res
	return ec.marshalOKubernetesContext2ᚕᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐKubernetesContext(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_KubernetesContextsPage_contexts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "KubernetesContextsPage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_KubernetesContext_id(ctx, field)
			case "name":
				return ec.fieldContext_KubernetesContext_name(ctx, field)
			case "auth":
				return ec.fieldContext_KubernetesContext_auth(ctx, field)
			case "cluster":
				return ec.fieldContext_KubernetesContext_cluster(ctx, field)
			case "server":
				return ec.fieldContext_KubernetesContext_server(ctx, field)
			case "owner":
				return ec.fieldContext_KubernetesContext_owner(ctx, field)
			case "createdBy":
				return ec.fieldContext_KubernetesContext_createdBy(ctx, field)
			case "mesheryInstanceID":
				return ec.fieldContext_KubernetesContext_mesheryInstanceID(ctx, field)
			case "kubernetesServerID":
				return ec.fieldContext_KubernetesContext_kubernetesServerID(ctx, field)
			case "deploymentType":
				return ec.fieldContext_KubernetesContext_deploymentType(ctx, field)
			case "updatedAt":
				return ec.fieldContext_KubernetesContext_updatedAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_KubernetesContext_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type KubernetesContext", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Location_branch(ctx context.Context, field graphql.CollectedField, obj *customTypes.Location) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Location_branch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Branch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Location_branch(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Location",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Location_host(ctx context.Context, field graphql.CollectedField, obj *customTypes.Location) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Location_host(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Host, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Location_host(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Location",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Location_path(ctx context.Context, field graphql.CollectedField, obj *customTypes.Location) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Location_path(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Path, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Location_path(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Location",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Location_type(ctx context.Context, field graphql.CollectedField, obj *customTypes.Location) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Location_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Location_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Location",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MeshSyncEvent_type(ctx context.Context, field graphql.CollectedField, obj *customTypes.MeshSyncEvent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MeshSyncEvent_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MeshSyncEvent_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MeshSyncEvent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MeshSyncEvent_object(ctx context.Context, field graphql.CollectedField, obj *customTypes.MeshSyncEvent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MeshSyncEvent_object(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Object, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(interface{})
	fc.Result = res
	return ec.marshalNAny2interface(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MeshSyncEvent_object(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MeshSyncEvent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Any does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MeshSyncEvent_contextID(ctx context.Context, field graphql.CollectedField, obj *customTypes.MeshSyncEvent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MeshSyncEvent_contextID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContextID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MeshSyncEvent_contextID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MeshSyncEvent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MesheryControllersStatusListItem_contextID(ctx context.Context, field graphql.CollectedField, obj *customTypes.MesheryControllersStatusListItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MesheryControllersStatusListItem_contextID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContextID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MesheryControllersStatusListItem_contextID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MesheryControllersStatusListItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MesheryControllersStatusListItem_controller(ctx context.Context, field graphql.CollectedField, obj *customTypes.MesheryControllersStatusListItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MesheryControllersStatusListItem_controller(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Controller, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(customTypes.MesheryController)
	fc.Result = res
	return ec.marshalNMesheryController2githubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐMesheryController(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MesheryControllersStatusListItem_controller(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MesheryControllersStatusListItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type MesheryController does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MesheryControllersStatusListItem_status(ctx context.Context, field graphql.CollectedField, obj *customTypes.MesheryControllersStatusListItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MesheryControllersStatusListItem_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(customTypes.MesheryControllerStatus)
	fc.Result = res
	return ec.marshalNMesheryControllerStatus2githubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐMesheryControllerStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MesheryControllersStatusListItem_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MesheryControllersStatusListItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type MesheryControllerStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MesheryResult_mesheryID(ctx context.Context, field graphql.CollectedField, obj *customTypes.MesheryResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MesheryResult_mesheryID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MesheryID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MesheryResult_mesheryID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MesheryResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MesheryResult_name(ctx context.Context, field graphql.CollectedField, obj *customTypes.MesheryResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MesheryResult_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MesheryResult_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MesheryResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MesheryResult_mesh(ctx context.Context, field graphql.CollectedField, obj *customTypes.MesheryResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MesheryResult_mesh(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mesh, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MesheryResult_mesh(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MesheryResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MesheryResult_performanceProfile(ctx context.Context, field graphql.CollectedField, obj *customTypes.MesheryResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MesheryResult_performanceProfile(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PerformanceProfile, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MesheryResult_performanceProfile(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MesheryResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MesheryResult_testID(ctx context.Context, field graphql.CollectedField, obj *customTypes.MesheryResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MesheryResult_testID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TestID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MesheryResult_testID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MesheryResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MesheryResult_runnerResults(ctx context.Context, field graphql.CollectedField, obj *customTypes.MesheryResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MesheryResult_runnerResults(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RunnerResults, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(map[string]interface{})
	fc.Result = res
	return ec.marshalOMap2map(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MesheryResult_runnerResults(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MesheryResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Map does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MesheryResult_serverMetrics(ctx context.Context, field graphql.CollectedField, obj *customTypes.MesheryResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MesheryResult_serverMetrics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ServerMetrics, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(map[string]interface{})
	fc.Result = res
	return ec.marshalOMap2map(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MesheryResult_serverMetrics(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MesheryResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Map does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MesheryResult_serverBoardConfig(ctx context.Context, field graphql.CollectedField, obj *customTypes.MesheryResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MesheryResult_serverBoardConfig(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ServerBoardConfig, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MesheryResult_serverBoardConfig(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MesheryResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MesheryResult_testStartTime(ctx context.Context, field graphql.CollectedField, obj *customTypes.MesheryResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MesheryResult_testStartTime(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TestStartTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MesheryResult_testStartTime(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MesheryResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MesheryResult_userID(ctx context.Context, field graphql.CollectedField, obj *customTypes.MesheryResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MesheryResult_userID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MesheryResult_userID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MesheryResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MesheryResult_updatedAt(ctx context.Context, field graphql.CollectedField, obj *customTypes.MesheryResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MesheryResult_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MesheryResult_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MesheryResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MesheryResult_createdAt(ctx context.Context, field graphql.CollectedField, obj *customTypes.MesheryResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MesheryResult_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MesheryResult_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MesheryResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NameSpace_namespace(ctx context.Context, field graphql.CollectedField, obj *customTypes.NameSpace) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NameSpace_namespace(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Namespace, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NameSpace_namespace(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NameSpace",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NullString_String(ctx context.Context, field graphql.CollectedField, obj *customTypes.NullString) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NullString_String(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.String, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NullString_String(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NullString",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NullString_Valid(ctx context.Context, field graphql.CollectedField, obj *customTypes.NullString) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NullString_Valid(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Valid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NullString_Valid(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NullString",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OAMCapability_oamDefinition(ctx context.Context, field graphql.CollectedField, obj *customTypes.OAMCapability) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OAMCapability_oamDefinition(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OamDefinition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(interface{})
	fc.Result = res
	return ec.marshalOAny2interface(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OAMCapability_oamDefinition(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OAMCapability",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Any does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OAMCapability_id(ctx context.Context, field graphql.CollectedField, obj *customTypes.OAMCapability) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OAMCapability_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OAMCapability_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OAMCapability",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OAMCapability_oamRefSchema(ctx context.Context, field graphql.CollectedField, obj *customTypes.OAMCapability) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OAMCapability_oamRefSchema(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OamRefSchema, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OAMCapability_oamRefSchema(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OAMCapability",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OAMCapability_host(ctx context.Context, field graphql.CollectedField, obj *customTypes.OAMCapability) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OAMCapability_host(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Host, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OAMCapability_host(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OAMCapability",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OAMCapability_restricted(ctx context.Context, field graphql.CollectedField, obj *customTypes.OAMCapability) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OAMCapability_restricted(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Restricted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OAMCapability_restricted(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OAMCapability",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OAMCapability_metadata(ctx context.Context, field graphql.CollectedField, obj *customTypes.OAMCapability) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OAMCapability_metadata(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metadata, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(interface{})
	fc.Result = res
	return ec.marshalOAny2interface(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OAMCapability_metadata(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OAMCapability",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Any does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OperatorControllerStatus_name(ctx context.Context, field graphql.CollectedField, obj *customTypes.OperatorControllerStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OperatorControllerStatus_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OperatorControllerStatus_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OperatorControllerStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OperatorControllerStatus_version(ctx context.Context, field graphql.CollectedField, obj *customTypes.OperatorControllerStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OperatorControllerStatus_version(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OperatorControllerStatus_version(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OperatorControllerStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OperatorControllerStatus_status(ctx context.Context, field graphql.CollectedField, obj *customTypes.OperatorControllerStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OperatorControllerStatus_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(customTypes.Status)
	fc.Result = res
	return ec.marshalNStatus2githubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OperatorControllerStatus_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OperatorControllerStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Status does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OperatorControllerStatus_error(ctx context.Context, field graphql.CollectedField, obj *customTypes.OperatorControllerStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OperatorControllerStatus_error(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*customTypes.Error)
	fc.Result = res
	return ec.marshalNError2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐError(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OperatorControllerStatus_error(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OperatorControllerStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_Error_code(ctx, field)
			case "description":
				return ec.fieldContext_Error_description(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Error", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _OperatorControllerStatus_contextID(ctx context.Context, field graphql.CollectedField, obj *customTypes.OperatorControllerStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OperatorControllerStatus_contextID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContextID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OperatorControllerStatus_contextID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OperatorControllerStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OperatorControllerStatusPerKubernetesContext_contextID(ctx context.Context, field graphql.CollectedField, obj *customTypes.OperatorControllerStatusPerKubernetesContext) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OperatorControllerStatusPerKubernetesContext_contextID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContextID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OperatorControllerStatusPerKubernetesContext_contextID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OperatorControllerStatusPerKubernetesContext",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OperatorControllerStatusPerKubernetesContext_OperatorControllerStatus(ctx context.Context, field graphql.CollectedField, obj *customTypes.OperatorControllerStatusPerKubernetesContext) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OperatorControllerStatusPerKubernetesContext_OperatorControllerStatus(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatorControllerStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*customTypes.OperatorControllerStatus)
	fc.Result = res
	return ec.marshalNOperatorControllerStatus2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐOperatorControllerStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OperatorControllerStatusPerKubernetesContext_OperatorControllerStatus(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OperatorControllerStatusPerKubernetesContext",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_OperatorControllerStatus_name(ctx, field)
			case "version":
				return ec.fieldContext_OperatorControllerStatus_version(ctx, field)
			case "status":
				return ec.fieldContext_OperatorControllerStatus_status(ctx, field)
			case "error":
				return ec.fieldContext_OperatorControllerStatus_error(ctx, field)
			case "contextID":
				return ec.fieldContext_OperatorControllerStatus_contextID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OperatorControllerStatus", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _OperatorStatus_status(ctx context.Context, field graphql.CollectedField, obj *customTypes.OperatorStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OperatorStatus_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(customTypes.Status)
	fc.Result = res
	return ec.marshalNStatus2githubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OperatorStatus_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OperatorStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Status does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OperatorStatus_version(ctx context.Context, field graphql.CollectedField, obj *customTypes.OperatorStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OperatorStatus_version(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OperatorStatus_version(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OperatorStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OperatorStatus_controllers(ctx context.Context, field graphql.CollectedField, obj *customTypes.OperatorStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OperatorStatus_controllers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Controllers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*customTypes.OperatorControllerStatus)
	fc.Result = res
	return ec.marshalOOperatorControllerStatus2ᚕᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐOperatorControllerStatusᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OperatorStatus_controllers(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OperatorStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_OperatorControllerStatus_name(ctx, field)
			case "version":
				return ec.fieldContext_OperatorControllerStatus_version(ctx, field)
			case "status":
				return ec.fieldContext_OperatorControllerStatus_status(ctx, field)
			case "error":
				return ec.fieldContext_OperatorControllerStatus_error(ctx, field)
			case "contextID":
				return ec.fieldContext_OperatorControllerStatus_contextID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OperatorControllerStatus", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _OperatorStatus_error(ctx context.Context, field graphql.CollectedField, obj *customTypes.OperatorStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OperatorStatus_error(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*customTypes.Error)
	fc.Result = res
	return ec.marshalOError2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐError(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OperatorStatus_error(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OperatorStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_Error_code(ctx, field)
			case "description":
				return ec.fieldContext_Error_description(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Error", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _OperatorStatus_contextID(ctx context.Context, field graphql.CollectedField, obj *customTypes.OperatorStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OperatorStatus_contextID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContextID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OperatorStatus_contextID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OperatorStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OperatorStatusInput_targetStatus(ctx context.Context, field graphql.CollectedField, obj *customTypes.OperatorStatusInput) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OperatorStatusInput_targetStatus(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TargetStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OperatorStatusInput_targetStatus(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OperatorStatusInput",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OperatorStatusInput_contextID(ctx context.Context, field graphql.CollectedField, obj *customTypes.OperatorStatusInput) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OperatorStatusInput_contextID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContextID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OperatorStatusInput_contextID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OperatorStatusInput",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OperatorStatusPerKubernetesContext_contextID(ctx context.Context, field graphql.CollectedField, obj *customTypes.OperatorStatusPerKubernetesContext) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OperatorStatusPerKubernetesContext_contextID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContextID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OperatorStatusPerKubernetesContext_contextID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OperatorStatusPerKubernetesContext",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OperatorStatusPerKubernetesContext_operatorStatus(ctx context.Context, field graphql.CollectedField, obj *customTypes.OperatorStatusPerKubernetesContext) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OperatorStatusPerKubernetesContext_operatorStatus(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatorStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*customTypes.OperatorStatus)
	fc.Result = res
	return ec.marshalNOperatorStatus2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐOperatorStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OperatorStatusPerKubernetesContext_operatorStatus(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OperatorStatusPerKubernetesContext",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_OperatorStatus_status(ctx, field)
			case "version":
				return ec.fieldContext_OperatorStatus_version(ctx, field)
			case "controllers":
				return ec.fieldContext_OperatorStatus_controllers(ctx, field)
			case "error":
				return ec.fieldContext_OperatorStatus_error(ctx, field)
			case "contextID":
				return ec.fieldContext_OperatorStatus_contextID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OperatorStatus", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PatternPage_id(ctx context.Context, field graphql.CollectedField, obj *customTypes.PatternPage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PatternPage_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PatternPage_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PatternPage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PatternPage_name(ctx context.Context, field graphql.CollectedField, obj *customTypes.PatternPage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PatternPage_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PatternPage_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PatternPage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PatternPage_userID(ctx context.Context, field graphql.CollectedField, obj *customTypes.PatternPage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PatternPage_userID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PatternPage_userID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PatternPage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PatternPage_location(ctx context.Context, field graphql.CollectedField, obj *customTypes.PatternPage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PatternPage_location(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Location, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*customTypes.Location)
	fc.Result = res
	return ec.marshalNLocation2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐLocation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PatternPage_location(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PatternPage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "branch":
				return ec.fieldContext_Location_branch(ctx, field)
			case "host":
				return ec.fieldContext_Location_host(ctx, field)
			case "path":
				return ec.fieldContext_Location_path(ctx, field)
			case "type":
				return ec.fieldContext_Location_type(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Location", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PatternPage_patternFile(ctx context.Context, field graphql.CollectedField, obj *customTypes.PatternPage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PatternPage_patternFile(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PatternFile, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PatternPage_patternFile(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PatternPage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PatternPage_visibility(ctx context.Context, field graphql.CollectedField, obj *customTypes.PatternPage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PatternPage_visibility(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Visibility, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PatternPage_visibility(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PatternPage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PatternPage_catalogData(ctx context.Context, field graphql.CollectedField, obj *customTypes.PatternPage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PatternPage_catalogData(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CatalogData, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(map[string]interface{})
	fc.Result = res
	return ec.marshalOMap2map(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PatternPage_catalogData(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PatternPage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Map does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PatternPage_canSupport(ctx context.Context, field graphql.CollectedField, obj *customTypes.PatternPage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PatternPage_canSupport(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CanSupport, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PatternPage_canSupport(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PatternPage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PatternPage_errmsg(ctx context.Context, field graphql.CollectedField, obj *customTypes.PatternPage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PatternPage_errmsg(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Errmsg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PatternPage_errmsg(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PatternPage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PatternPage_createdAt(ctx context.Context, field graphql.CollectedField, obj *customTypes.PatternPage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PatternPage_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PatternPage_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PatternPage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PatternPage_updatedAt(ctx context.Context, field graphql.CollectedField, obj *customTypes.PatternPage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PatternPage_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PatternPage_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PatternPage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PatternPageResult_page(ctx context.Context, field graphql.CollectedField, obj *customTypes.PatternPageResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PatternPageResult_page(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Page, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PatternPageResult_page(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PatternPageResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PatternPageResult_pageSize(ctx context.Context, field graphql.CollectedField, obj *customTypes.PatternPageResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PatternPageResult_pageSize(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageSize, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PatternPageResult_pageSize(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PatternPageResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PatternPageResult_totalCount(ctx context.Context, field graphql.CollectedField, obj *customTypes.PatternPageResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PatternPageResult_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PatternPageResult_totalCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PatternPageResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PatternPageResult_patterns(ctx context.Context, field graphql.CollectedField, obj *customTypes.PatternPageResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PatternPageResult_patterns(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Patterns, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*customTypes.PatternResult)
	fc.Result = res
	return ec.marshalOPatternResult2ᚕᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐPatternResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PatternPageResult_patterns(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PatternPageResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PatternResult_id(ctx, field)
			case "name":
				return ec.fieldContext_PatternResult_name(ctx, field)
			case "userID":
				return ec.fieldContext_PatternResult_userID(ctx, field)
			case "location":
				return ec.fieldContext_PatternResult_location(ctx, field)
			case "patternFile":
				return ec.fieldContext_PatternResult_patternFile(ctx, field)
			case "visibility":
				return ec.fieldContext_PatternResult_visibility(ctx, field)
			case "catalogData":
				return ec.fieldContext_PatternResult_catalogData(ctx, field)
			case "canSupport":
				return ec.fieldContext_PatternResult_canSupport(ctx, field)
			case "errmsg":
				return ec.fieldContext_PatternResult_errmsg(ctx, field)
			case "createdAt":
				return ec.fieldContext_PatternResult_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_PatternResult_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PatternResult", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PatternResult_id(ctx context.Context, field graphql.CollectedField, obj *customTypes.PatternResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PatternResult_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PatternResult_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PatternResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PatternResult_name(ctx context.Context, field graphql.CollectedField, obj *customTypes.PatternResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PatternResult_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PatternResult_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PatternResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PatternResult_userID(ctx context.Context, field graphql.CollectedField, obj *customTypes.PatternResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PatternResult_userID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PatternResult_userID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PatternResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PatternResult_location(ctx context.Context, field graphql.CollectedField, obj *customTypes.PatternResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PatternResult_location(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Location, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*customTypes.Location)
	fc.Result = res
	return ec.marshalNLocation2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐLocation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PatternResult_location(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PatternResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "branch":
				return ec.fieldContext_Location_branch(ctx, field)
			case "host":
				return ec.fieldContext_Location_host(ctx, field)
			case "path":
				return ec.fieldContext_Location_path(ctx, field)
			case "type":
				return ec.fieldContext_Location_type(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Location", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PatternResult_patternFile(ctx context.Context, field graphql.CollectedField, obj *customTypes.PatternResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PatternResult_patternFile(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PatternFile, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PatternResult_patternFile(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PatternResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PatternResult_visibility(ctx context.Context, field graphql.CollectedField, obj *customTypes.PatternResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PatternResult_visibility(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Visibility, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PatternResult_visibility(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PatternResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PatternResult_catalogData(ctx context.Context, field graphql.CollectedField, obj *customTypes.PatternResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PatternResult_catalogData(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CatalogData, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(map[string]interface{})
	fc.Result = res
	return ec.marshalOMap2map(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PatternResult_catalogData(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PatternResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Map does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PatternResult_canSupport(ctx context.Context, field graphql.CollectedField, obj *customTypes.PatternResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PatternResult_canSupport(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CanSupport, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PatternResult_canSupport(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PatternResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PatternResult_errmsg(ctx context.Context, field graphql.CollectedField, obj *customTypes.PatternResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PatternResult_errmsg(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Errmsg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PatternResult_errmsg(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PatternResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PatternResult_createdAt(ctx context.Context, field graphql.CollectedField, obj *customTypes.PatternResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PatternResult_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PatternResult_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PatternResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PatternResult_updatedAt(ctx context.Context, field graphql.CollectedField, obj *customTypes.PatternResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PatternResult_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PatternResult_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PatternResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PerfPageProfiles_page(ctx context.Context, field graphql.CollectedField, obj *customTypes.PerfPageProfiles) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PerfPageProfiles_page(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Page, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PerfPageProfiles_page(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PerfPageProfiles",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PerfPageProfiles_pageSize(ctx context.Context, field graphql.CollectedField, obj *customTypes.PerfPageProfiles) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PerfPageProfiles_pageSize(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageSize, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PerfPageProfiles_pageSize(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PerfPageProfiles",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PerfPageProfiles_totalCount(ctx context.Context, field graphql.CollectedField, obj *customTypes.PerfPageProfiles) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PerfPageProfiles_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PerfPageProfiles_totalCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PerfPageProfiles",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PerfPageProfiles_profiles(ctx context.Context, field graphql.CollectedField, obj *customTypes.PerfPageProfiles) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PerfPageProfiles_profiles(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Profiles, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*customTypes.PerfProfile)
	fc.Result = res
	return ec.marshalOPerfProfile2ᚕᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐPerfProfile(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PerfPageProfiles_profiles(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PerfPageProfiles",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "concurrentRequest":
				return ec.fieldContext_PerfProfile_concurrentRequest(ctx, field)
			case "createdAt":
				return ec.fieldContext_PerfProfile_createdAt(ctx, field)
			case "duration":
				return ec.fieldContext_PerfProfile_duration(ctx, field)
			case "endpoints":
				return ec.fieldContext_PerfProfile_endpoints(ctx, field)
			case "id":
				return ec.fieldContext_PerfProfile_id(ctx, field)
			case "lastRun":
				return ec.fieldContext_PerfProfile_lastRun(ctx, field)
			case "loadGenerators":
				return ec.fieldContext_PerfProfile_loadGenerators(ctx, field)
			case "name":
				return ec.fieldContext_PerfProfile_name(ctx, field)
			case "qps":
				return ec.fieldContext_PerfProfile_qps(ctx, field)
			case "totalResults":
				return ec.fieldContext_PerfProfile_totalResults(ctx, field)
			case "updatedAt":
				return ec.fieldContext_PerfProfile_updatedAt(ctx, field)
			case "userID":
				return ec.fieldContext_PerfProfile_userID(ctx, field)
			case "request_headers":
				return ec.fieldContext_PerfProfile_request_headers(ctx, field)
			case "request_cookies":
				return ec.fieldContext_PerfProfile_request_cookies(ctx, field)
			case "request_body":
				return ec.fieldContext_PerfProfile_request_body(ctx, field)
			case "content_type":
				return ec.fieldContext_PerfProfile_content_type(ctx, field)
			case "service_mesh":
				return ec.fieldContext_PerfProfile_service_mesh(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PerfProfile", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PerfPageResult_page(ctx context.Context, field graphql.CollectedField, obj *customTypes.PerfPageResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PerfPageResult_page(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Page, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PerfPageResult_page(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PerfPageResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PerfPageResult_pageSize(ctx context.Context, field graphql.CollectedField, obj *customTypes.PerfPageResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PerfPageResult_pageSize(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageSize, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PerfPageResult_pageSize(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PerfPageResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PerfPageResult_totalCount(ctx context.Context, field graphql.CollectedField, obj *customTypes.PerfPageResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PerfPageResult_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PerfPageResult_totalCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PerfPageResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PerfPageResult_results(ctx context.Context, field graphql.CollectedField, obj *customTypes.PerfPageResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PerfPageResult_results(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Results, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*customTypes.MesheryResult)
	fc.Result = res
	return ec.marshalOMesheryResult2ᚕᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐMesheryResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PerfPageResult_results(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PerfPageResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "mesheryID":
				return ec.fieldContext_MesheryResult_mesheryID(ctx, field)
			case "name":
				return ec.fieldContext_MesheryResult_name(ctx, field)
			case "mesh":
				return ec.fieldContext_MesheryResult_mesh(ctx, field)
			case "performanceProfile":
				return ec.fieldContext_MesheryResult_performanceProfile(ctx, field)
			case "testID":
				return ec.fieldContext_MesheryResult_testID(ctx, field)
			case "runnerResults":
				return ec.fieldContext_MesheryResult_runnerResults(ctx, field)
			case "serverMetrics":
				return ec.fieldContext_MesheryResult_serverMetrics(ctx, field)
			case "serverBoardConfig":
				return ec.fieldContext_MesheryResult_serverBoardConfig(ctx, field)
			case "testStartTime":
				return ec.fieldContext_MesheryResult_testStartTime(ctx, field)
			case "userID":
				return ec.fieldContext_MesheryResult_userID(ctx, field)
			case "updatedAt":
				return ec.fieldContext_MesheryResult_updatedAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_MesheryResult_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MesheryResult", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PerfProfile_concurrentRequest(ctx context.Context, field graphql.CollectedField, obj *customTypes.PerfProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PerfProfile_concurrentRequest(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConcurrentRequest, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PerfProfile_concurrentRequest(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PerfProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PerfProfile_createdAt(ctx context.Context, field graphql.CollectedField, obj *customTypes.PerfProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PerfProfile_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PerfProfile_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PerfProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PerfProfile_duration(ctx context.Context, field graphql.CollectedField, obj *customTypes.PerfProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PerfProfile_duration(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Duration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PerfProfile_duration(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PerfProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PerfProfile_endpoints(ctx context.Context, field graphql.CollectedField, obj *customTypes.PerfProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PerfProfile_endpoints(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Endpoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PerfProfile_endpoints(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PerfProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PerfProfile_id(ctx context.Context, field graphql.CollectedField, obj *customTypes.PerfProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PerfProfile_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PerfProfile_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PerfProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PerfProfile_lastRun(ctx context.Context, field graphql.CollectedField, obj *customTypes.PerfProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PerfProfile_lastRun(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastRun, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PerfProfile_lastRun(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PerfProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PerfProfile_loadGenerators(ctx context.Context, field graphql.CollectedField, obj *customTypes.PerfProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PerfProfile_loadGenerators(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LoadGenerators, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PerfProfile_loadGenerators(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PerfProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PerfProfile_name(ctx context.Context, field graphql.CollectedField, obj *customTypes.PerfProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PerfProfile_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PerfProfile_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PerfProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PerfProfile_qps(ctx context.Context, field graphql.CollectedField, obj *customTypes.PerfProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PerfProfile_qps(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QPS, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PerfProfile_qps(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PerfProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PerfProfile_totalResults(ctx context.Context, field graphql.CollectedField, obj *customTypes.PerfProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PerfProfile_totalResults(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalResults, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PerfProfile_totalResults(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PerfProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PerfProfile_updatedAt(ctx context.Context, field graphql.CollectedField, obj *customTypes.PerfProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PerfProfile_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PerfProfile_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PerfProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PerfProfile_userID(ctx context.Context, field graphql.CollectedField, obj *customTypes.PerfProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PerfProfile_userID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PerfProfile_userID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PerfProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PerfProfile_request_headers(ctx context.Context, field graphql.CollectedField, obj *customTypes.PerfProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PerfProfile_request_headers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RequestHeaders, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PerfProfile_request_headers(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PerfProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PerfProfile_request_cookies(ctx context.Context, field graphql.CollectedField, obj *customTypes.PerfProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PerfProfile_request_cookies(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RequestCookies, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PerfProfile_request_cookies(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PerfProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PerfProfile_request_body(ctx context.Context, field graphql.CollectedField, obj *customTypes.PerfProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PerfProfile_request_body(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RequestBody, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PerfProfile_request_body(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PerfProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PerfProfile_content_type(ctx context.Context, field graphql.CollectedField, obj *customTypes.PerfProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PerfProfile_content_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContentType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PerfProfile_content_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PerfProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PerfProfile_service_mesh(ctx context.Context, field graphql.CollectedField, obj *customTypes.PerfProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PerfProfile_service_mesh(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ServiceMesh, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PerfProfile_service_mesh(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PerfProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_getAvailableAddons(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getAvailableAddons(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetAvailableAddons(rctx, fc.Args["filter"].(*customTypes.ServiceMeshFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*customTypes.AddonList)
	fc.Result = res
	return ec.marshalNAddonList2ᚕᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐAddonListᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getAvailableAddons(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_AddonList_name(ctx, field)
			case "owner":
				return ec.fieldContext_AddonList_owner(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AddonList", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getAvailableAddons_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getControlPlanes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getControlPlanes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetControlPlanes(rctx, fc.Args["filter"].(*customTypes.ServiceMeshFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*customTypes.ControlPlane)
	fc.Result = res
	return ec.marshalNControlPlane2ᚕᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐControlPlaneᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getControlPlanes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_ControlPlane_name(ctx, field)
			case "members":
				return ec.fieldContext_ControlPlane_members(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ControlPlane", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getControlPlanes_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getDataPlanes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getDataPlanes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetDataPlanes(rctx, fc.Args["filter"].(*customTypes.ServiceMeshFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*customTypes.DataPlane)
	fc.Result = res
	return ec.marshalNDataPlane2ᚕᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐDataPlaneᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getDataPlanes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Name":
				return ec.fieldContext_DataPlane_Name(ctx, field)
			case "proxies":
				return ec.fieldContext_DataPlane_proxies(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DataPlane", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getDataPlanes_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getOperatorStatus(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getOperatorStatus(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetOperatorStatus(rctx, fc.Args["kubernetesContextID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*customTypes.OperatorStatus)
	fc.Result = res
	return ec.marshalOOperatorStatus2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐOperatorStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getOperatorStatus(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_OperatorStatus_status(ctx, field)
			case "version":
				return ec.fieldContext_OperatorStatus_version(ctx, field)
			case "controllers":
				return ec.fieldContext_OperatorStatus_controllers(ctx, field)
			case "error":
				return ec.fieldContext_OperatorStatus_error(ctx, field)
			case "contextID":
				return ec.fieldContext_OperatorStatus_contextID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OperatorStatus", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getOperatorStatus_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_resyncCluster(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_resyncCluster(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ResyncCluster(rctx, fc.Args["selector"].(*customTypes.ResyncActions), fc.Args["kubernetesContextID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(customTypes.Status)
	fc.Result = res
	return ec.marshalNStatus2githubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_resyncCluster(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Status does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_resyncCluster_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getMeshsyncStatus(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getMeshsyncStatus(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetMeshsyncStatus(rctx, fc.Args["kubernetesContextID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*customTypes.OperatorControllerStatus)
	fc.Result = res
	return ec.marshalNOperatorControllerStatus2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐOperatorControllerStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getMeshsyncStatus(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_OperatorControllerStatus_name(ctx, field)
			case "version":
				return ec.fieldContext_OperatorControllerStatus_version(ctx, field)
			case "status":
				return ec.fieldContext_OperatorControllerStatus_status(ctx, field)
			case "error":
				return ec.fieldContext_OperatorControllerStatus_error(ctx, field)
			case "contextID":
				return ec.fieldContext_OperatorControllerStatus_contextID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OperatorControllerStatus", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getMeshsyncStatus_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_deployMeshsync(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_deployMeshsync(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DeployMeshsync(rctx, fc.Args["kubernetesContextID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(customTypes.Status)
	fc.Result = res
	return ec.marshalNStatus2githubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_deployMeshsync(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Status does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_deployMeshsync_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getNatsStatus(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getNatsStatus(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetNatsStatus(rctx, fc.Args["kubernetesContextID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*customTypes.OperatorControllerStatus)
	fc.Result = res
	return ec.marshalNOperatorControllerStatus2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐOperatorControllerStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getNatsStatus(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_OperatorControllerStatus_name(ctx, field)
			case "version":
				return ec.fieldContext_OperatorControllerStatus_version(ctx, field)
			case "status":
				return ec.fieldContext_OperatorControllerStatus_status(ctx, field)
			case "error":
				return ec.fieldContext_OperatorControllerStatus_error(ctx, field)
			case "contextID":
				return ec.fieldContext_OperatorControllerStatus_contextID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OperatorControllerStatus", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getNatsStatus_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_connectToNats(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_connectToNats(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ConnectToNats(rctx, fc.Args["kubernetesContextID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(customTypes.Status)
	fc.Result = res
	return ec.marshalNStatus2githubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_connectToNats(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Status does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_connectToNats_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getAvailableNamespaces(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getAvailableNamespaces(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetAvailableNamespaces(rctx, fc.Args["k8sclusterIds"].([]string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*customTypes.NameSpace)
	fc.Result = res
	return ec.marshalNNameSpace2ᚕᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐNameSpaceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getAvailableNamespaces(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "namespace":
				return ec.fieldContext_NameSpace_namespace(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type NameSpace", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getAvailableNamespaces_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getPerfResult(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getPerfResult(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetPerfResult(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*customTypes.MesheryResult)
	fc.Result = res
	return ec.marshalOMesheryResult2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐMesheryResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getPerfResult(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "mesheryID":
				return ec.fieldContext_MesheryResult_mesheryID(ctx, field)
			case "name":
				return ec.fieldContext_MesheryResult_name(ctx, field)
			case "mesh":
				return ec.fieldContext_MesheryResult_mesh(ctx, field)
			case "performanceProfile":
				return ec.fieldContext_MesheryResult_performanceProfile(ctx, field)
			case "testID":
				return ec.fieldContext_MesheryResult_testID(ctx, field)
			case "runnerResults":
				return ec.fieldContext_MesheryResult_runnerResults(ctx, field)
			case "serverMetrics":
				return ec.fieldContext_MesheryResult_serverMetrics(ctx, field)
			case "serverBoardConfig":
				return ec.fieldContext_MesheryResult_serverBoardConfig(ctx, field)
			case "testStartTime":
				return ec.fieldContext_MesheryResult_testStartTime(ctx, field)
			case "userID":
				return ec.fieldContext_MesheryResult_userID(ctx, field)
			case "updatedAt":
				return ec.fieldContext_MesheryResult_updatedAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_MesheryResult_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MesheryResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getPerfResult_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_fetchResults(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_fetchResults(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FetchResults(rctx, fc.Args["selector"].(customTypes.PageFilter), fc.Args["profileID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*customTypes.PerfPageResult)
	fc.Result = res
	return ec.marshalNPerfPageResult2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐPerfPageResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_fetchResults(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "page":
				return ec.fieldContext_PerfPageResult_page(ctx, field)
			case "pageSize":
				return ec.fieldContext_PerfPageResult_pageSize(ctx, field)
			case "totalCount":
				return ec.fieldContext_PerfPageResult_totalCount(ctx, field)
			case "results":
				return ec.fieldContext_PerfPageResult_results(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PerfPageResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_fetchResults_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getPerformanceProfiles(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getPerformanceProfiles(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetPerformanceProfiles(rctx, fc.Args["selector"].(customTypes.PageFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*customTypes.PerfPageProfiles)
	fc.Result = res
	return ec.marshalNPerfPageProfiles2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐPerfPageProfiles(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getPerformanceProfiles(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "page":
				return ec.fieldContext_PerfPageProfiles_page(ctx, field)
			case "pageSize":
				return ec.fieldContext_PerfPageProfiles_pageSize(ctx, field)
			case "totalCount":
				return ec.fieldContext_PerfPageProfiles_totalCount(ctx, field)
			case "profiles":
				return ec.fieldContext_PerfPageProfiles_profiles(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PerfPageProfiles", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getPerformanceProfiles_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_fetchAllResults(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_fetchAllResults(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FetchAllResults(rctx, fc.Args["selector"].(customTypes.PageFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*customTypes.PerfPageResult)
	fc.Result = res
	return ec.marshalNPerfPageResult2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐPerfPageResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_fetchAllResults(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "page":
				return ec.fieldContext_PerfPageResult_page(ctx, field)
			case "pageSize":
				return ec.fieldContext_PerfPageResult_pageSize(ctx, field)
			case "totalCount":
				return ec.fieldContext_PerfPageResult_totalCount(ctx, field)
			case "results":
				return ec.fieldContext_PerfPageResult_results(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PerfPageResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_fetchAllResults_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_fetchPatterns(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_fetchPatterns(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FetchPatterns(rctx, fc.Args["selector"].(customTypes.PageFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*customTypes.PatternPageResult)
	fc.Result = res
	return ec.marshalNPatternPageResult2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐPatternPageResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_fetchPatterns(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "page":
				return ec.fieldContext_PatternPageResult_page(ctx, field)
			case "pageSize":
				return ec.fieldContext_PatternPageResult_pageSize(ctx, field)
			case "totalCount":
				return ec.fieldContext_PatternPageResult_totalCount(ctx, field)
			case "patterns":
				return ec.fieldContext_PatternPageResult_patterns(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PatternPageResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_fetchPatterns_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getWorkloads(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getWorkloads(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetWorkloads(rctx, fc.Args["name"].(*string), fc.Args["id"].(*string), fc.Args["trim"].(*bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*customTypes.OAMCapability)
	fc.Result = res
	return ec.marshalOOAMCapability2ᚕᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐOAMCapability(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getWorkloads(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "oamDefinition":
				return ec.fieldContext_OAMCapability_oamDefinition(ctx, field)
			case "id":
				return ec.fieldContext_OAMCapability_id(ctx, field)
			case "oamRefSchema":
				return ec.fieldContext_OAMCapability_oamRefSchema(ctx, field)
			case "host":
				return ec.fieldContext_OAMCapability_host(ctx, field)
			case "restricted":
				return ec.fieldContext_OAMCapability_restricted(ctx, field)
			case "metadata":
				return ec.fieldContext_OAMCapability_metadata(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OAMCapability", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getWorkloads_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getTraits(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getTraits(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetTraits(rctx, fc.Args["name"].(*string), fc.Args["id"].(*string), fc.Args["trim"].(*bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*customTypes.OAMCapability)
	fc.Result = res
	return ec.marshalOOAMCapability2ᚕᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐOAMCapability(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getTraits(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "oamDefinition":
				return ec.fieldContext_OAMCapability_oamDefinition(ctx, field)
			case "id":
				return ec.fieldContext_OAMCapability_id(ctx, field)
			case "oamRefSchema":
				return ec.fieldContext_OAMCapability_oamRefSchema(ctx, field)
			case "host":
				return ec.fieldContext_OAMCapability_host(ctx, field)
			case "restricted":
				return ec.fieldContext_OAMCapability_restricted(ctx, field)
			case "metadata":
				return ec.fieldContext_OAMCapability_metadata(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OAMCapability", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getTraits_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getScopes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getScopes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetScopes(rctx, fc.Args["name"].(*string), fc.Args["id"].(*string), fc.Args["trim"].(*bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*customTypes.OAMCapability)
	fc.Result = res
	return ec.marshalOOAMCapability2ᚕᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐOAMCapability(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getScopes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "oamDefinition":
				return ec.fieldContext_OAMCapability_oamDefinition(ctx, field)
			case "id":
				return ec.fieldContext_OAMCapability_id(ctx, field)
			case "oamRefSchema":
				return ec.fieldContext_OAMCapability_oamRefSchema(ctx, field)
			case "host":
				return ec.fieldContext_OAMCapability_host(ctx, field)
			case "restricted":
				return ec.fieldContext_OAMCapability_restricted(ctx, field)
			case "metadata":
				return ec.fieldContext_OAMCapability_metadata(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OAMCapability", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getScopes_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getKubectlDescribe(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getKubectlDescribe(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetKubectlDescribe(rctx, fc.Args["name"].(string), fc.Args["kind"].(string), fc.Args["namespace"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*customTypes.KubectlDescribeDetails)
	fc.Result = res
	return ec.marshalNKubectlDescribeDetails2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐKubectlDescribeDetails(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getKubectlDescribe(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "describe":
				return ec.fieldContext_KubectlDescribeDetails_describe(ctx, field)
			case "contextID":
				return ec.fieldContext_KubectlDescribeDetails_contextID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type KubectlDescribeDetails", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getKubectlDescribe_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_fetchPatternCatalogContent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_fetchPatternCatalogContent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FetchPatternCatalogContent(rctx, fc.Args["selector"].(*customTypes.CatalogSelector))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*customTypes.CatalogPattern)
	fc.Result = res
	return ec.marshalNCatalogPattern2ᚕᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐCatalogPatternᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_fetchPatternCatalogContent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CatalogPattern_id(ctx, field)
			case "name":
				return ec.fieldContext_CatalogPattern_name(ctx, field)
			case "userID":
				return ec.fieldContext_CatalogPattern_userID(ctx, field)
			case "patternFile":
				return ec.fieldContext_CatalogPattern_patternFile(ctx, field)
			case "location":
				return ec.fieldContext_CatalogPattern_location(ctx, field)
			case "visibility":
				return ec.fieldContext_CatalogPattern_visibility(ctx, field)
			case "catalogData":
				return ec.fieldContext_CatalogPattern_catalogData(ctx, field)
			case "createdAt":
				return ec.fieldContext_CatalogPattern_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_CatalogPattern_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CatalogPattern", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_fetchPatternCatalogContent_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_fetchFilterCatalogContent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_fetchFilterCatalogContent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FetchFilterCatalogContent(rctx, fc.Args["selector"].(*customTypes.CatalogSelector))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*customTypes.CatalogFilter)
	fc.Result = res
	return ec.marshalNCatalogFilter2ᚕᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐCatalogFilterᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_fetchFilterCatalogContent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CatalogFilter_id(ctx, field)
			case "name":
				return ec.fieldContext_CatalogFilter_name(ctx, field)
			case "filterFile":
				return ec.fieldContext_CatalogFilter_filterFile(ctx, field)
			case "userID":
				return ec.fieldContext_CatalogFilter_userID(ctx, field)
			case "location":
				return ec.fieldContext_CatalogFilter_location(ctx, field)
			case "visibility":
				return ec.fieldContext_CatalogFilter_visibility(ctx, field)
			case "catalogData":
				return ec.fieldContext_CatalogFilter_catalogData(ctx, field)
			case "createdAt":
				return ec.fieldContext_CatalogFilter_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_CatalogFilter_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CatalogFilter", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_fetchFilterCatalogContent_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getClusterResources(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getClusterResources(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetClusterResources(rctx, fc.Args["kubernetesContextIDs"].([]string), fc.Args["namespace"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*customTypes.ClusterResources)
	fc.Result = res
	return ec.marshalNClusterResources2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐClusterResources(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getClusterResources(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "resources":
				return ec.fieldContext_ClusterResources_resources(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ClusterResources", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getClusterResources_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(fc.Args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query___type_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___schema(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___schema(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext___Schema_description(ctx, field)
			case "types":
				return ec.fieldContext___Schema_types(ctx, field)
			case "queryType":
				return ec.fieldContext___Schema_queryType(ctx, field)
			case "mutationType":
				return ec.fieldContext___Schema_mutationType(ctx, field)
			case "subscriptionType":
				return ec.fieldContext___Schema_subscriptionType(ctx, field)
			case "directives":
				return ec.fieldContext___Schema_directives(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Schema", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Resource_kind(ctx context.Context, field graphql.CollectedField, obj *customTypes.Resource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Resource_kind(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Resource_kind(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Resource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Resource_count(ctx context.Context, field graphql.CollectedField, obj *customTypes.Resource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Resource_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Resource_count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Resource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_listenToAddonState(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	fc, err := ec.fieldContext_Subscription_listenToAddonState(ctx, field)
	if err != nil {
		return nil
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().ListenToAddonState(rctx, fc.Args["filter"].(*customTypes.ServiceMeshFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func(ctx context.Context) graphql.Marshaler {
		select {
		case res, ok := <-resTmp.(<-chan []*customTypes.AddonList):
			if !ok {
				return nil
			}
			return graphql.WriterFunc(func(w io.Writer) {
				w.Write([]byte{'{'})
				graphql.MarshalString(field.Alias).MarshalGQL(w)
				w.Write([]byte{':'})
				ec.marshalNAddonList2ᚕᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐAddonListᚄ(ctx, field.Selections, res).MarshalGQL(w)
				w.Write([]byte{'}'})
			})
		case <-ctx.Done():
			return nil
		}
	}
}

func (ec *executionContext) fieldContext_Subscription_listenToAddonState(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_AddonList_name(ctx, field)
			case "owner":
				return ec.fieldContext_AddonList_owner(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AddonList", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Subscription_listenToAddonState_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_listenToControlPlaneState(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	fc, err := ec.fieldContext_Subscription_listenToControlPlaneState(ctx, field)
	if err != nil {
		return nil
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().ListenToControlPlaneState(rctx, fc.Args["filter"].(*customTypes.ServiceMeshFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func(ctx context.Context) graphql.Marshaler {
		select {
		case res, ok := <-resTmp.(<-chan []*customTypes.ControlPlane):
			if !ok {
				return nil
			}
			return graphql.WriterFunc(func(w io.Writer) {
				w.Write([]byte{'{'})
				graphql.MarshalString(field.Alias).MarshalGQL(w)
				w.Write([]byte{':'})
				ec.marshalNControlPlane2ᚕᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐControlPlaneᚄ(ctx, field.Selections, res).MarshalGQL(w)
				w.Write([]byte{'}'})
			})
		case <-ctx.Done():
			return nil
		}
	}
}

func (ec *executionContext) fieldContext_Subscription_listenToControlPlaneState(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_ControlPlane_name(ctx, field)
			case "members":
				return ec.fieldContext_ControlPlane_members(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ControlPlane", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Subscription_listenToControlPlaneState_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_listenToDataPlaneState(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	fc, err := ec.fieldContext_Subscription_listenToDataPlaneState(ctx, field)
	if err != nil {
		return nil
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().ListenToDataPlaneState(rctx, fc.Args["filter"].(*customTypes.ServiceMeshFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func(ctx context.Context) graphql.Marshaler {
		select {
		case res, ok := <-resTmp.(<-chan []*customTypes.DataPlane):
			if !ok {
				return nil
			}
			return graphql.WriterFunc(func(w io.Writer) {
				w.Write([]byte{'{'})
				graphql.MarshalString(field.Alias).MarshalGQL(w)
				w.Write([]byte{':'})
				ec.marshalNDataPlane2ᚕᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐDataPlaneᚄ(ctx, field.Selections, res).MarshalGQL(w)
				w.Write([]byte{'}'})
			})
		case <-ctx.Done():
			return nil
		}
	}
}

func (ec *executionContext) fieldContext_Subscription_listenToDataPlaneState(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Name":
				return ec.fieldContext_DataPlane_Name(ctx, field)
			case "proxies":
				return ec.fieldContext_DataPlane_proxies(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DataPlane", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Subscription_listenToDataPlaneState_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_listenToOperatorState(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	fc, err := ec.fieldContext_Subscription_listenToOperatorState(ctx, field)
	if err != nil {
		return nil
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().ListenToOperatorState(rctx, fc.Args["kubernetesContextIDs"].([]string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		return nil
	}
	return func(ctx context.Context) graphql.Marshaler {
		select {
		case res, ok := <-resTmp.(<-chan *customTypes.OperatorStatusPerKubernetesContext):
			if !ok {
				return nil
			}
			return graphql.WriterFunc(func(w io.Writer) {
				w.Write([]byte{'{'})
				graphql.MarshalString(field.Alias).MarshalGQL(w)
				w.Write([]byte{':'})
				ec.marshalOOperatorStatusPerKubernetesContext2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐOperatorStatusPerKubernetesContext(ctx, field.Selections, res).MarshalGQL(w)
				w.Write([]byte{'}'})
			})
		case <-ctx.Done():
			return nil
		}
	}
}

func (ec *executionContext) fieldContext_Subscription_listenToOperatorState(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "contextID":
				return ec.fieldContext_OperatorStatusPerKubernetesContext_contextID(ctx, field)
			case "operatorStatus":
				return ec.fieldContext_OperatorStatusPerKubernetesContext_operatorStatus(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OperatorStatusPerKubernetesContext", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Subscription_listenToOperatorState_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_listenToMeshSyncEvents(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	fc, err := ec.fieldContext_Subscription_listenToMeshSyncEvents(ctx, field)
	if err != nil {
		return nil
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().ListenToMeshSyncEvents(rctx, fc.Args["kubernetesContextIDs"].([]string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		return nil
	}
	return func(ctx context.Context) graphql.Marshaler {
		select {
		case res, ok := <-resTmp.(<-chan *customTypes.OperatorControllerStatusPerKubernetesContext):
			if !ok {
				return nil
			}
			return graphql.WriterFunc(func(w io.Writer) {
				w.Write([]byte{'{'})
				graphql.MarshalString(field.Alias).MarshalGQL(w)
				w.Write([]byte{':'})
				ec.marshalOOperatorControllerStatusPerKubernetesContext2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐOperatorControllerStatusPerKubernetesContext(ctx, field.Selections, res).MarshalGQL(w)
				w.Write([]byte{'}'})
			})
		case <-ctx.Done():
			return nil
		}
	}
}

func (ec *executionContext) fieldContext_Subscription_listenToMeshSyncEvents(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "contextID":
				return ec.fieldContext_OperatorControllerStatusPerKubernetesContext_contextID(ctx, field)
			case "OperatorControllerStatus":
				return ec.fieldContext_OperatorControllerStatusPerKubernetesContext_OperatorControllerStatus(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OperatorControllerStatusPerKubernetesContext", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Subscription_listenToMeshSyncEvents_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_subscribePerfProfiles(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	fc, err := ec.fieldContext_Subscription_subscribePerfProfiles(ctx, field)
	if err != nil {
		return nil
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().SubscribePerfProfiles(rctx, fc.Args["selector"].(customTypes.PageFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func(ctx context.Context) graphql.Marshaler {
		select {
		case res, ok := <-resTmp.(<-chan *customTypes.PerfPageProfiles):
			if !ok {
				return nil
			}
			return graphql.WriterFunc(func(w io.Writer) {
				w.Write([]byte{'{'})
				graphql.MarshalString(field.Alias).MarshalGQL(w)
				w.Write([]byte{':'})
				ec.marshalNPerfPageProfiles2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐPerfPageProfiles(ctx, field.Selections, res).MarshalGQL(w)
				w.Write([]byte{'}'})
			})
		case <-ctx.Done():
			return nil
		}
	}
}

func (ec *executionContext) fieldContext_Subscription_subscribePerfProfiles(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "page":
				return ec.fieldContext_PerfPageProfiles_page(ctx, field)
			case "pageSize":
				return ec.fieldContext_PerfPageProfiles_pageSize(ctx, field)
			case "totalCount":
				return ec.fieldContext_PerfPageProfiles_totalCount(ctx, field)
			case "profiles":
				return ec.fieldContext_PerfPageProfiles_profiles(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PerfPageProfiles", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Subscription_subscribePerfProfiles_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_subscribePerfResults(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	fc, err := ec.fieldContext_Subscription_subscribePerfResults(ctx, field)
	if err != nil {
		return nil
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().SubscribePerfResults(rctx, fc.Args["selector"].(customTypes.PageFilter), fc.Args["profileID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func(ctx context.Context) graphql.Marshaler {
		select {
		case res, ok := <-resTmp.(<-chan *customTypes.PerfPageResult):
			if !ok {
				return nil
			}
			return graphql.WriterFunc(func(w io.Writer) {
				w.Write([]byte{'{'})
				graphql.MarshalString(field.Alias).MarshalGQL(w)
				w.Write([]byte{':'})
				ec.marshalNPerfPageResult2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐPerfPageResult(ctx, field.Selections, res).MarshalGQL(w)
				w.Write([]byte{'}'})
			})
		case <-ctx.Done():
			return nil
		}
	}
}

func (ec *executionContext) fieldContext_Subscription_subscribePerfResults(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "page":
				return ec.fieldContext_PerfPageResult_page(ctx, field)
			case "pageSize":
				return ec.fieldContext_PerfPageResult_pageSize(ctx, field)
			case "totalCount":
				return ec.fieldContext_PerfPageResult_totalCount(ctx, field)
			case "results":
				return ec.fieldContext_PerfPageResult_results(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PerfPageResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Subscription_subscribePerfResults_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_subscribeBrokerConnection(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	fc, err := ec.fieldContext_Subscription_subscribeBrokerConnection(ctx, field)
	if err != nil {
		return nil
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().SubscribeBrokerConnection(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func(ctx context.Context) graphql.Marshaler {
		select {
		case res, ok := <-resTmp.(<-chan bool):
			if !ok {
				return nil
			}
			return graphql.WriterFunc(func(w io.Writer) {
				w.Write([]byte{'{'})
				graphql.MarshalString(field.Alias).MarshalGQL(w)
				w.Write([]byte{':'})
				ec.marshalNBoolean2bool(ctx, field.Selections, res).MarshalGQL(w)
				w.Write([]byte{'}'})
			})
		case <-ctx.Done():
			return nil
		}
	}
}

func (ec *executionContext) fieldContext_Subscription_subscribeBrokerConnection(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_subscribeMesheryControllersStatus(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	fc, err := ec.fieldContext_Subscription_subscribeMesheryControllersStatus(ctx, field)
	if err != nil {
		return nil
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().SubscribeMesheryControllersStatus(rctx, fc.Args["kubernetesContextIDs"].([]string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func(ctx context.Context) graphql.Marshaler {
		select {
		case res, ok := <-resTmp.(<-chan []*customTypes.MesheryControllersStatusListItem):
			if !ok {
				return nil
			}
			return graphql.WriterFunc(func(w io.Writer) {
				w.Write([]byte{'{'})
				graphql.MarshalString(field.Alias).MarshalGQL(w)
				w.Write([]byte{':'})
				ec.marshalNMesheryControllersStatusListItem2ᚕᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐMesheryControllersStatusListItemᚄ(ctx, field.Selections, res).MarshalGQL(w)
				w.Write([]byte{'}'})
			})
		case <-ctx.Done():
			return nil
		}
	}
}

func (ec *executionContext) fieldContext_Subscription_subscribeMesheryControllersStatus(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "contextID":
				return ec.fieldContext_MesheryControllersStatusListItem_contextID(ctx, field)
			case "controller":
				return ec.fieldContext_MesheryControllersStatusListItem_controller(ctx, field)
			case "status":
				return ec.fieldContext_MesheryControllersStatusListItem_status(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MesheryControllersStatusListItem", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Subscription_subscribeMesheryControllersStatus_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_subscribeMeshSyncEvents(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	fc, err := ec.fieldContext_Subscription_subscribeMeshSyncEvents(ctx, field)
	if err != nil {
		return nil
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().SubscribeMeshSyncEvents(rctx, fc.Args["kubernetesContextIDs"].([]string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func(ctx context.Context) graphql.Marshaler {
		select {
		case res, ok := <-resTmp.(<-chan *customTypes.MeshSyncEvent):
			if !ok {
				return nil
			}
			return graphql.WriterFunc(func(w io.Writer) {
				w.Write([]byte{'{'})
				graphql.MarshalString(field.Alias).MarshalGQL(w)
				w.Write([]byte{':'})
				ec.marshalNMeshSyncEvent2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐMeshSyncEvent(ctx, field.Selections, res).MarshalGQL(w)
				w.Write([]byte{'}'})
			})
		case <-ctx.Done():
			return nil
		}
	}
}

func (ec *executionContext) fieldContext_Subscription_subscribeMeshSyncEvents(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "type":
				return ec.fieldContext_MeshSyncEvent_type(ctx, field)
			case "object":
				return ec.fieldContext_MeshSyncEvent_object(ctx, field)
			case "contextID":
				return ec.fieldContext_MeshSyncEvent_contextID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MeshSyncEvent", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Subscription_subscribeMeshSyncEvents_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_subscribeConfiguration(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	fc, err := ec.fieldContext_Subscription_subscribeConfiguration(ctx, field)
	if err != nil {
		return nil
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().SubscribeConfiguration(rctx, fc.Args["applicationSelector"].(customTypes.PageFilter), fc.Args["patternSelector"].(customTypes.PageFilter), fc.Args["filterSelector"].(customTypes.PageFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func(ctx context.Context) graphql.Marshaler {
		select {
		case res, ok := <-resTmp.(<-chan *customTypes.ConfigurationPage):
			if !ok {
				return nil
			}
			return graphql.WriterFunc(func(w io.Writer) {
				w.Write([]byte{'{'})
				graphql.MarshalString(field.Alias).MarshalGQL(w)
				w.Write([]byte{':'})
				ec.marshalNConfigurationPage2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐConfigurationPage(ctx, field.Selections, res).MarshalGQL(w)
				w.Write([]byte{'}'})
			})
		case <-ctx.Done():
			return nil
		}
	}
}

func (ec *executionContext) fieldContext_Subscription_subscribeConfiguration(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "applications":
				return ec.fieldContext_ConfigurationPage_applications(ctx, field)
			case "patterns":
				return ec.fieldContext_ConfigurationPage_patterns(ctx, field)
			case "filters":
				return ec.fieldContext_ConfigurationPage_filters(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConfigurationPage", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Subscription_subscribeConfiguration_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_subscribeClusterResources(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	fc, err := ec.fieldContext_Subscription_subscribeClusterResources(ctx, field)
	if err != nil {
		return nil
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().SubscribeClusterResources(rctx, fc.Args["kubernetesContextIDs"].([]string), fc.Args["namespace"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func(ctx context.Context) graphql.Marshaler {
		select {
		case res, ok := <-resTmp.(<-chan *customTypes.ClusterResources):
			if !ok {
				return nil
			}
			return graphql.WriterFunc(func(w io.Writer) {
				w.Write([]byte{'{'})
				graphql.MarshalString(field.Alias).MarshalGQL(w)
				w.Write([]byte{':'})
				ec.marshalNClusterResources2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐClusterResources(ctx, field.Selections, res).MarshalGQL(w)
				w.Write([]byte{'}'})
			})
		case <-ctx.Done():
			return nil
		}
	}
}

func (ec *executionContext) fieldContext_Subscription_subscribeClusterResources(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "resources":
				return ec.fieldContext_ClusterResources_resources(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ClusterResources", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Subscription_subscribeClusterResources_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_subscribeK8sContext(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	fc, err := ec.fieldContext_Subscription_subscribeK8sContext(ctx, field)
	if err != nil {
		return nil
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().SubscribeK8sContext(rctx, fc.Args["selector"].(customTypes.PageFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func(ctx context.Context) graphql.Marshaler {
		select {
		case res, ok := <-resTmp.(<-chan *customTypes.KubernetesContextsPage):
			if !ok {
				return nil
			}
			return graphql.WriterFunc(func(w io.Writer) {
				w.Write([]byte{'{'})
				graphql.MarshalString(field.Alias).MarshalGQL(w)
				w.Write([]byte{':'})
				ec.marshalNKubernetesContextsPage2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐKubernetesContextsPage(ctx, field.Selections, res).MarshalGQL(w)
				w.Write([]byte{'}'})
			})
		case <-ctx.Done():
			return nil
		}
	}
}

func (ec *executionContext) fieldContext_Subscription_subscribeK8sContext(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_KubernetesContextsPage_totalCount(ctx, field)
			case "contexts":
				return ec.fieldContext_KubernetesContextsPage_contexts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type KubernetesContextsPage", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Subscription_subscribeK8sContext_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_locations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_locations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __DirectiveLocation does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_isRepeatable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRepeatable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_isDeprecated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_deprecationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_defaultValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_types(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_types(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_queryType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_queryType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_mutationType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_mutationType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_subscriptionType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_directives(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_directives(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Directive_name(ctx, field)
			case "description":
				return ec.fieldContext___Directive_description(ctx, field)
			case "locations":
				return ec.fieldContext___Directive_locations(ctx, field)
			case "args":
				return ec.fieldContext___Directive_args(ctx, field)
			case "isRepeatable":
				return ec.fieldContext___Directive_isRepeatable(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Directive", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_kind(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_kind(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __TypeKind does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_fields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_fields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Field_name(ctx, field)
			case "description":
				return ec.fieldContext___Field_description(ctx, field)
			case "args":
				return ec.fieldContext___Field_args(ctx, field)
			case "type":
				return ec.fieldContext___Field_type(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___Field_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___Field_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Field", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_fields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_interfaces(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_interfaces(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_possibleTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_possibleTypes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_enumValues(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_enumValues(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___EnumValue_name(ctx, field)
			case "description":
				return ec.fieldContext___EnumValue_description(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___EnumValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___EnumValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __EnumValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_enumValues_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_inputFields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_inputFields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_ofType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_ofType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_specifiedByURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpecifiedByURL(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputAddonStatusInput(ctx context.Context, obj interface{}) (customTypes.AddonStatusInput, error) {
	var it customTypes.AddonStatusInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"selector", "kubernetesContextID", "targetStatus"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "selector":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("selector"))
			it.Selector, err = ec.unmarshalOMeshType2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐMeshType(ctx, v)
			if err != nil {
				return it, err
			}
		case "kubernetesContextID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("kubernetesContextID"))
			it.KubernetesContextID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "targetStatus":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("targetStatus"))
			it.TargetStatus, err = ec.unmarshalNStatus2githubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐStatus(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCatalogSelector(ctx context.Context, obj interface{}) (customTypes.CatalogSelector, error) {
	var it customTypes.CatalogSelector
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"search", "order"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "search":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
			it.Search, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "order":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
			it.Order, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPageFilter(ctx context.Context, obj interface{}) (customTypes.PageFilter, error) {
	var it customTypes.PageFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"page", "pageSize", "order", "search", "from", "to"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "page":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
			it.Page, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "pageSize":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pageSize"))
			it.PageSize, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "order":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
			it.Order, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "search":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
			it.Search, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "from":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("from"))
			it.From, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "to":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("to"))
			it.To, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputResyncActions(ctx context.Context, obj interface{}) (customTypes.ResyncActions, error) {
	var it customTypes.ResyncActions
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"clearDB", "Resync", "hardReset"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "clearDB":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearDB"))
			it.ClearDb, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Resync":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Resync"))
			it.Resync, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "hardReset":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hardReset"))
			it.HardReset, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputServiceMeshFilter(ctx context.Context, obj interface{}) (customTypes.ServiceMeshFilter, error) {
	var it customTypes.ServiceMeshFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"type", "kubernetesClusterIds"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalOMeshType2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐMeshType(ctx, v)
			if err != nil {
				return it, err
			}
		case "kubernetesClusterIds":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("kubernetesClusterIds"))
			it.KubernetesClusterIds, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var addonListImplementors = []string{"AddonList"}

func (ec *executionContext) _AddonList(ctx context.Context, sel ast.SelectionSet, obj *customTypes.AddonList) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, addonListImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AddonList")
		case "name":

			out.Values[i] = ec._AddonList_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "owner":

			out.Values[i] = ec._AddonList_owner(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var applicationPageImplementors = []string{"ApplicationPage"}

func (ec *executionContext) _ApplicationPage(ctx context.Context, sel ast.SelectionSet, obj *customTypes.ApplicationPage) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, applicationPageImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApplicationPage")
		case "page":

			out.Values[i] = ec._ApplicationPage_page(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageSize":

			out.Values[i] = ec._ApplicationPage_pageSize(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "totalCount":

			out.Values[i] = ec._ApplicationPage_totalCount(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "applications":

			out.Values[i] = ec._ApplicationPage_applications(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var applicationResultImplementors = []string{"ApplicationResult"}

func (ec *executionContext) _ApplicationResult(ctx context.Context, sel ast.SelectionSet, obj *customTypes.ApplicationResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, applicationResultImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApplicationResult")
		case "id":

			out.Values[i] = ec._ApplicationResult_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec._ApplicationResult_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "applicationFile":

			out.Values[i] = ec._ApplicationResult_applicationFile(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":

			out.Values[i] = ec._ApplicationResult_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "userID":

			out.Values[i] = ec._ApplicationResult_userID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "location":

			out.Values[i] = ec._ApplicationResult_location(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":

			out.Values[i] = ec._ApplicationResult_createdAt(ctx, field, obj)

		case "updatedAt":

			out.Values[i] = ec._ApplicationResult_updatedAt(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var catalogFilterImplementors = []string{"CatalogFilter"}

func (ec *executionContext) _CatalogFilter(ctx context.Context, sel ast.SelectionSet, obj *customTypes.CatalogFilter) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, catalogFilterImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CatalogFilter")
		case "id":

			out.Values[i] = ec._CatalogFilter_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec._CatalogFilter_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "filterFile":

			out.Values[i] = ec._CatalogFilter_filterFile(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "userID":

			out.Values[i] = ec._CatalogFilter_userID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "location":

			out.Values[i] = ec._CatalogFilter_location(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "visibility":

			out.Values[i] = ec._CatalogFilter_visibility(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "catalogData":

			out.Values[i] = ec._CatalogFilter_catalogData(ctx, field, obj)

		case "createdAt":

			out.Values[i] = ec._CatalogFilter_createdAt(ctx, field, obj)

		case "updatedAt":

			out.Values[i] = ec._CatalogFilter_updatedAt(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var catalogPatternImplementors = []string{"CatalogPattern"}

func (ec *executionContext) _CatalogPattern(ctx context.Context, sel ast.SelectionSet, obj *customTypes.CatalogPattern) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, catalogPatternImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CatalogPattern")
		case "id":

			out.Values[i] = ec._CatalogPattern_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec._CatalogPattern_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "userID":

			out.Values[i] = ec._CatalogPattern_userID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "patternFile":

			out.Values[i] = ec._CatalogPattern_patternFile(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "location":

			out.Values[i] = ec._CatalogPattern_location(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "visibility":

			out.Values[i] = ec._CatalogPattern_visibility(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "catalogData":

			out.Values[i] = ec._CatalogPattern_catalogData(ctx, field, obj)

		case "createdAt":

			out.Values[i] = ec._CatalogPattern_createdAt(ctx, field, obj)

		case "updatedAt":

			out.Values[i] = ec._CatalogPattern_updatedAt(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var clusterResourcesImplementors = []string{"ClusterResources"}

func (ec *executionContext) _ClusterResources(ctx context.Context, sel ast.SelectionSet, obj *customTypes.ClusterResources) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, clusterResourcesImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ClusterResources")
		case "resources":

			out.Values[i] = ec._ClusterResources_resources(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var configurationPageImplementors = []string{"ConfigurationPage"}

func (ec *executionContext) _ConfigurationPage(ctx context.Context, sel ast.SelectionSet, obj *customTypes.ConfigurationPage) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configurationPageImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigurationPage")
		case "applications":

			out.Values[i] = ec._ConfigurationPage_applications(ctx, field, obj)

		case "patterns":

			out.Values[i] = ec._ConfigurationPage_patterns(ctx, field, obj)

		case "filters":

			out.Values[i] = ec._ConfigurationPage_filters(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var containerImplementors = []string{"Container"}

func (ec *executionContext) _Container(ctx context.Context, sel ast.SelectionSet, obj *customTypes.Container) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, containerImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Container")
		case "controlPlaneMemberName":

			out.Values[i] = ec._Container_controlPlaneMemberName(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "containerName":

			out.Values[i] = ec._Container_containerName(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "image":

			out.Values[i] = ec._Container_image(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "status":

			out.Values[i] = ec._Container_status(ctx, field, obj)

		case "ports":

			out.Values[i] = ec._Container_ports(ctx, field, obj)

		case "resources":

			out.Values[i] = ec._Container_resources(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var container_PortImplementors = []string{"Container_Port"}

func (ec *executionContext) _Container_Port(ctx context.Context, sel ast.SelectionSet, obj *customTypes.ContainerPort) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, container_PortImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Container_Port")
		case "name":

			out.Values[i] = ec._Container_Port_name(ctx, field, obj)

		case "containerPort":

			out.Values[i] = ec._Container_Port_containerPort(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "protocol":

			out.Values[i] = ec._Container_Port_protocol(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var container_StatusImplementors = []string{"Container_Status"}

func (ec *executionContext) _Container_Status(ctx context.Context, sel ast.SelectionSet, obj *customTypes.ContainerStatus) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, container_StatusImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Container_Status")
		case "containerStatusName":

			out.Values[i] = ec._Container_Status_containerStatusName(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "image":

			out.Values[i] = ec._Container_Status_image(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "state":

			out.Values[i] = ec._Container_Status_state(ctx, field, obj)

		case "lastState":

			out.Values[i] = ec._Container_Status_lastState(ctx, field, obj)

		case "ready":

			out.Values[i] = ec._Container_Status_ready(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "restartCount":

			out.Values[i] = ec._Container_Status_restartCount(ctx, field, obj)

		case "started":

			out.Values[i] = ec._Container_Status_started(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "imageId":

			out.Values[i] = ec._Container_Status_imageId(ctx, field, obj)

		case "containerId":

			out.Values[i] = ec._Container_Status_containerId(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var controlPlaneImplementors = []string{"ControlPlane"}

func (ec *executionContext) _ControlPlane(ctx context.Context, sel ast.SelectionSet, obj *customTypes.ControlPlane) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, controlPlaneImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ControlPlane")
		case "name":

			out.Values[i] = ec._ControlPlane_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "members":

			out.Values[i] = ec._ControlPlane_members(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var controlPlaneMemberImplementors = []string{"ControlPlaneMember"}

func (ec *executionContext) _ControlPlaneMember(ctx context.Context, sel ast.SelectionSet, obj *customTypes.ControlPlaneMember) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, controlPlaneMemberImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ControlPlaneMember")
		case "name":

			out.Values[i] = ec._ControlPlaneMember_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "component":

			out.Values[i] = ec._ControlPlaneMember_component(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "version":

			out.Values[i] = ec._ControlPlaneMember_version(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "namespace":

			out.Values[i] = ec._ControlPlaneMember_namespace(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "data_planes":

			out.Values[i] = ec._ControlPlaneMember_data_planes(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dataPlaneImplementors = []string{"DataPlane"}

func (ec *executionContext) _DataPlane(ctx context.Context, sel ast.SelectionSet, obj *customTypes.DataPlane) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dataPlaneImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DataPlane")
		case "Name":

			out.Values[i] = ec._DataPlane_Name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "proxies":

			out.Values[i] = ec._DataPlane_proxies(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var errorImplementors = []string{"Error"}

func (ec *executionContext) _Error(ctx context.Context, sel ast.SelectionSet, obj *customTypes.Error) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, errorImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Error")
		case "code":

			out.Values[i] = ec._Error_code(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec._Error_description(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var filterPageImplementors = []string{"FilterPage"}

func (ec *executionContext) _FilterPage(ctx context.Context, sel ast.SelectionSet, obj *customTypes.FilterPage) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, filterPageImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FilterPage")
		case "page":

			out.Values[i] = ec._FilterPage_page(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageSize":

			out.Values[i] = ec._FilterPage_pageSize(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "totalCount":

			out.Values[i] = ec._FilterPage_totalCount(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "filters":

			out.Values[i] = ec._FilterPage_filters(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var filterResultImplementors = []string{"FilterResult"}

func (ec *executionContext) _FilterResult(ctx context.Context, sel ast.SelectionSet, obj *customTypes.FilterResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, filterResultImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FilterResult")
		case "id":

			out.Values[i] = ec._FilterResult_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec._FilterResult_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "filterFile":

			out.Values[i] = ec._FilterResult_filterFile(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "userID":

			out.Values[i] = ec._FilterResult_userID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "location":

			out.Values[i] = ec._FilterResult_location(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "visibility":

			out.Values[i] = ec._FilterResult_visibility(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "catalogData":

			out.Values[i] = ec._FilterResult_catalogData(ctx, field, obj)

		case "createdAt":

			out.Values[i] = ec._FilterResult_createdAt(ctx, field, obj)

		case "updatedAt":

			out.Values[i] = ec._FilterResult_updatedAt(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var kubectlDescribeDetailsImplementors = []string{"KubectlDescribeDetails"}

func (ec *executionContext) _KubectlDescribeDetails(ctx context.Context, sel ast.SelectionSet, obj *customTypes.KubectlDescribeDetails) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, kubectlDescribeDetailsImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("KubectlDescribeDetails")
		case "describe":

			out.Values[i] = ec._KubectlDescribeDetails_describe(ctx, field, obj)

		case "contextID":

			out.Values[i] = ec._KubectlDescribeDetails_contextID(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var kubernetesContextImplementors = []string{"KubernetesContext"}

func (ec *executionContext) _KubernetesContext(ctx context.Context, sel ast.SelectionSet, obj *customTypes.KubernetesContext) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, kubernetesContextImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("KubernetesContext")
		case "id":

			out.Values[i] = ec._KubernetesContext_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec._KubernetesContext_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "auth":

			out.Values[i] = ec._KubernetesContext_auth(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cluster":

			out.Values[i] = ec._KubernetesContext_cluster(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "server":

			out.Values[i] = ec._KubernetesContext_server(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "owner":

			out.Values[i] = ec._KubernetesContext_owner(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdBy":

			out.Values[i] = ec._KubernetesContext_createdBy(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mesheryInstanceID":

			out.Values[i] = ec._KubernetesContext_mesheryInstanceID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "kubernetesServerID":

			out.Values[i] = ec._KubernetesContext_kubernetesServerID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deploymentType":

			out.Values[i] = ec._KubernetesContext_deploymentType(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatedAt":

			out.Values[i] = ec._KubernetesContext_updatedAt(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":

			out.Values[i] = ec._KubernetesContext_createdAt(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var kubernetesContextsPageImplementors = []string{"KubernetesContextsPage"}

func (ec *executionContext) _KubernetesContextsPage(ctx context.Context, sel ast.SelectionSet, obj *customTypes.KubernetesContextsPage) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, kubernetesContextsPageImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("KubernetesContextsPage")
		case "totalCount":

			out.Values[i] = ec._KubernetesContextsPage_totalCount(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "contexts":

			out.Values[i] = ec._KubernetesContextsPage_contexts(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var locationImplementors = []string{"Location"}

func (ec *executionContext) _Location(ctx context.Context, sel ast.SelectionSet, obj *customTypes.Location) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, locationImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Location")
		case "branch":

			out.Values[i] = ec._Location_branch(ctx, field, obj)

		case "host":

			out.Values[i] = ec._Location_host(ctx, field, obj)

		case "path":

			out.Values[i] = ec._Location_path(ctx, field, obj)

		case "type":

			out.Values[i] = ec._Location_type(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var meshSyncEventImplementors = []string{"MeshSyncEvent"}

func (ec *executionContext) _MeshSyncEvent(ctx context.Context, sel ast.SelectionSet, obj *customTypes.MeshSyncEvent) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, meshSyncEventImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MeshSyncEvent")
		case "type":

			out.Values[i] = ec._MeshSyncEvent_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "object":

			out.Values[i] = ec._MeshSyncEvent_object(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "contextID":

			out.Values[i] = ec._MeshSyncEvent_contextID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mesheryControllersStatusListItemImplementors = []string{"MesheryControllersStatusListItem"}

func (ec *executionContext) _MesheryControllersStatusListItem(ctx context.Context, sel ast.SelectionSet, obj *customTypes.MesheryControllersStatusListItem) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mesheryControllersStatusListItemImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MesheryControllersStatusListItem")
		case "contextID":

			out.Values[i] = ec._MesheryControllersStatusListItem_contextID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "controller":

			out.Values[i] = ec._MesheryControllersStatusListItem_controller(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "status":

			out.Values[i] = ec._MesheryControllersStatusListItem_status(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mesheryResultImplementors = []string{"MesheryResult"}

func (ec *executionContext) _MesheryResult(ctx context.Context, sel ast.SelectionSet, obj *customTypes.MesheryResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mesheryResultImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MesheryResult")
		case "mesheryID":

			out.Values[i] = ec._MesheryResult_mesheryID(ctx, field, obj)

		case "name":

			out.Values[i] = ec._MesheryResult_name(ctx, field, obj)

		case "mesh":

			out.Values[i] = ec._MesheryResult_mesh(ctx, field, obj)

		case "performanceProfile":

			out.Values[i] = ec._MesheryResult_performanceProfile(ctx, field, obj)

		case "testID":

			out.Values[i] = ec._MesheryResult_testID(ctx, field, obj)

		case "runnerResults":

			out.Values[i] = ec._MesheryResult_runnerResults(ctx, field, obj)

		case "serverMetrics":

			out.Values[i] = ec._MesheryResult_serverMetrics(ctx, field, obj)

		case "serverBoardConfig":

			out.Values[i] = ec._MesheryResult_serverBoardConfig(ctx, field, obj)

		case "testStartTime":

			out.Values[i] = ec._MesheryResult_testStartTime(ctx, field, obj)

		case "userID":

			out.Values[i] = ec._MesheryResult_userID(ctx, field, obj)

		case "updatedAt":

			out.Values[i] = ec._MesheryResult_updatedAt(ctx, field, obj)

		case "createdAt":

			out.Values[i] = ec._MesheryResult_createdAt(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var nameSpaceImplementors = []string{"NameSpace"}

func (ec *executionContext) _NameSpace(ctx context.Context, sel ast.SelectionSet, obj *customTypes.NameSpace) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, nameSpaceImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NameSpace")
		case "namespace":

			out.Values[i] = ec._NameSpace_namespace(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var nullStringImplementors = []string{"NullString"}

func (ec *executionContext) _NullString(ctx context.Context, sel ast.SelectionSet, obj *customTypes.NullString) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, nullStringImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NullString")
		case "String":

			out.Values[i] = ec._NullString_String(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Valid":

			out.Values[i] = ec._NullString_Valid(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var oAMCapabilityImplementors = []string{"OAMCapability"}

func (ec *executionContext) _OAMCapability(ctx context.Context, sel ast.SelectionSet, obj *customTypes.OAMCapability) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, oAMCapabilityImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OAMCapability")
		case "oamDefinition":

			out.Values[i] = ec._OAMCapability_oamDefinition(ctx, field, obj)

		case "id":

			out.Values[i] = ec._OAMCapability_id(ctx, field, obj)

		case "oamRefSchema":

			out.Values[i] = ec._OAMCapability_oamRefSchema(ctx, field, obj)

		case "host":

			out.Values[i] = ec._OAMCapability_host(ctx, field, obj)

		case "restricted":

			out.Values[i] = ec._OAMCapability_restricted(ctx, field, obj)

		case "metadata":

			out.Values[i] = ec._OAMCapability_metadata(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var operatorControllerStatusImplementors = []string{"OperatorControllerStatus"}

func (ec *executionContext) _OperatorControllerStatus(ctx context.Context, sel ast.SelectionSet, obj *customTypes.OperatorControllerStatus) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, operatorControllerStatusImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OperatorControllerStatus")
		case "name":

			out.Values[i] = ec._OperatorControllerStatus_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "version":

			out.Values[i] = ec._OperatorControllerStatus_version(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "status":

			out.Values[i] = ec._OperatorControllerStatus_status(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "error":

			out.Values[i] = ec._OperatorControllerStatus_error(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "contextID":

			out.Values[i] = ec._OperatorControllerStatus_contextID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var operatorControllerStatusPerKubernetesContextImplementors = []string{"OperatorControllerStatusPerKubernetesContext"}

func (ec *executionContext) _OperatorControllerStatusPerKubernetesContext(ctx context.Context, sel ast.SelectionSet, obj *customTypes.OperatorControllerStatusPerKubernetesContext) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, operatorControllerStatusPerKubernetesContextImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OperatorControllerStatusPerKubernetesContext")
		case "contextID":

			out.Values[i] = ec._OperatorControllerStatusPerKubernetesContext_contextID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "OperatorControllerStatus":

			out.Values[i] = ec._OperatorControllerStatusPerKubernetesContext_OperatorControllerStatus(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var operatorStatusImplementors = []string{"OperatorStatus"}

func (ec *executionContext) _OperatorStatus(ctx context.Context, sel ast.SelectionSet, obj *customTypes.OperatorStatus) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, operatorStatusImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OperatorStatus")
		case "status":

			out.Values[i] = ec._OperatorStatus_status(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "version":

			out.Values[i] = ec._OperatorStatus_version(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "controllers":

			out.Values[i] = ec._OperatorStatus_controllers(ctx, field, obj)

		case "error":

			out.Values[i] = ec._OperatorStatus_error(ctx, field, obj)

		case "contextID":

			out.Values[i] = ec._OperatorStatus_contextID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var operatorStatusInputImplementors = []string{"OperatorStatusInput"}

func (ec *executionContext) _OperatorStatusInput(ctx context.Context, sel ast.SelectionSet, obj *customTypes.OperatorStatusInput) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, operatorStatusInputImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OperatorStatusInput")
		case "targetStatus":

			out.Values[i] = ec._OperatorStatusInput_targetStatus(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "contextID":

			out.Values[i] = ec._OperatorStatusInput_contextID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var operatorStatusPerKubernetesContextImplementors = []string{"OperatorStatusPerKubernetesContext"}

func (ec *executionContext) _OperatorStatusPerKubernetesContext(ctx context.Context, sel ast.SelectionSet, obj *customTypes.OperatorStatusPerKubernetesContext) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, operatorStatusPerKubernetesContextImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OperatorStatusPerKubernetesContext")
		case "contextID":

			out.Values[i] = ec._OperatorStatusPerKubernetesContext_contextID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "operatorStatus":

			out.Values[i] = ec._OperatorStatusPerKubernetesContext_operatorStatus(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var patternPageImplementors = []string{"PatternPage"}

func (ec *executionContext) _PatternPage(ctx context.Context, sel ast.SelectionSet, obj *customTypes.PatternPage) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, patternPageImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PatternPage")
		case "id":

			out.Values[i] = ec._PatternPage_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec._PatternPage_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "userID":

			out.Values[i] = ec._PatternPage_userID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "location":

			out.Values[i] = ec._PatternPage_location(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "patternFile":

			out.Values[i] = ec._PatternPage_patternFile(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "visibility":

			out.Values[i] = ec._PatternPage_visibility(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "catalogData":

			out.Values[i] = ec._PatternPage_catalogData(ctx, field, obj)

		case "canSupport":

			out.Values[i] = ec._PatternPage_canSupport(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "errmsg":

			out.Values[i] = ec._PatternPage_errmsg(ctx, field, obj)

		case "createdAt":

			out.Values[i] = ec._PatternPage_createdAt(ctx, field, obj)

		case "updatedAt":

			out.Values[i] = ec._PatternPage_updatedAt(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var patternPageResultImplementors = []string{"PatternPageResult"}

func (ec *executionContext) _PatternPageResult(ctx context.Context, sel ast.SelectionSet, obj *customTypes.PatternPageResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, patternPageResultImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PatternPageResult")
		case "page":

			out.Values[i] = ec._PatternPageResult_page(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageSize":

			out.Values[i] = ec._PatternPageResult_pageSize(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "totalCount":

			out.Values[i] = ec._PatternPageResult_totalCount(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "patterns":

			out.Values[i] = ec._PatternPageResult_patterns(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var patternResultImplementors = []string{"PatternResult"}

func (ec *executionContext) _PatternResult(ctx context.Context, sel ast.SelectionSet, obj *customTypes.PatternResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, patternResultImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PatternResult")
		case "id":

			out.Values[i] = ec._PatternResult_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec._PatternResult_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "userID":

			out.Values[i] = ec._PatternResult_userID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "location":

			out.Values[i] = ec._PatternResult_location(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "patternFile":

			out.Values[i] = ec._PatternResult_patternFile(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "visibility":

			out.Values[i] = ec._PatternResult_visibility(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "catalogData":

			out.Values[i] = ec._PatternResult_catalogData(ctx, field, obj)

		case "canSupport":

			out.Values[i] = ec._PatternResult_canSupport(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "errmsg":

			out.Values[i] = ec._PatternResult_errmsg(ctx, field, obj)

		case "createdAt":

			out.Values[i] = ec._PatternResult_createdAt(ctx, field, obj)

		case "updatedAt":

			out.Values[i] = ec._PatternResult_updatedAt(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var perfPageProfilesImplementors = []string{"PerfPageProfiles"}

func (ec *executionContext) _PerfPageProfiles(ctx context.Context, sel ast.SelectionSet, obj *customTypes.PerfPageProfiles) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, perfPageProfilesImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PerfPageProfiles")
		case "page":

			out.Values[i] = ec._PerfPageProfiles_page(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageSize":

			out.Values[i] = ec._PerfPageProfiles_pageSize(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "totalCount":

			out.Values[i] = ec._PerfPageProfiles_totalCount(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "profiles":

			out.Values[i] = ec._PerfPageProfiles_profiles(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var perfPageResultImplementors = []string{"PerfPageResult"}

func (ec *executionContext) _PerfPageResult(ctx context.Context, sel ast.SelectionSet, obj *customTypes.PerfPageResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, perfPageResultImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PerfPageResult")
		case "page":

			out.Values[i] = ec._PerfPageResult_page(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageSize":

			out.Values[i] = ec._PerfPageResult_pageSize(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "totalCount":

			out.Values[i] = ec._PerfPageResult_totalCount(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "results":

			out.Values[i] = ec._PerfPageResult_results(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var perfProfileImplementors = []string{"PerfProfile"}

func (ec *executionContext) _PerfProfile(ctx context.Context, sel ast.SelectionSet, obj *customTypes.PerfProfile) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, perfProfileImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PerfProfile")
		case "concurrentRequest":

			out.Values[i] = ec._PerfProfile_concurrentRequest(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":

			out.Values[i] = ec._PerfProfile_createdAt(ctx, field, obj)

		case "duration":

			out.Values[i] = ec._PerfProfile_duration(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "endpoints":

			out.Values[i] = ec._PerfProfile_endpoints(ctx, field, obj)

		case "id":

			out.Values[i] = ec._PerfProfile_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "lastRun":

			out.Values[i] = ec._PerfProfile_lastRun(ctx, field, obj)

		case "loadGenerators":

			out.Values[i] = ec._PerfProfile_loadGenerators(ctx, field, obj)

		case "name":

			out.Values[i] = ec._PerfProfile_name(ctx, field, obj)

		case "qps":

			out.Values[i] = ec._PerfProfile_qps(ctx, field, obj)

		case "totalResults":

			out.Values[i] = ec._PerfProfile_totalResults(ctx, field, obj)

		case "updatedAt":

			out.Values[i] = ec._PerfProfile_updatedAt(ctx, field, obj)

		case "userID":

			out.Values[i] = ec._PerfProfile_userID(ctx, field, obj)

		case "request_headers":

			out.Values[i] = ec._PerfProfile_request_headers(ctx, field, obj)

		case "request_cookies":

			out.Values[i] = ec._PerfProfile_request_cookies(ctx, field, obj)

		case "request_body":

			out.Values[i] = ec._PerfProfile_request_body(ctx, field, obj)

		case "content_type":

			out.Values[i] = ec._PerfProfile_content_type(ctx, field, obj)

		case "service_mesh":

			out.Values[i] = ec._PerfProfile_service_mesh(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "getAvailableAddons":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getAvailableAddons(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getControlPlanes":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getControlPlanes(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getDataPlanes":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getDataPlanes(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getOperatorStatus":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getOperatorStatus(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "resyncCluster":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_resyncCluster(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getMeshsyncStatus":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getMeshsyncStatus(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "deployMeshsync":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_deployMeshsync(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getNatsStatus":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getNatsStatus(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "connectToNats":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_connectToNats(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getAvailableNamespaces":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getAvailableNamespaces(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getPerfResult":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getPerfResult(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "fetchResults":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_fetchResults(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getPerformanceProfiles":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getPerformanceProfiles(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "fetchAllResults":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_fetchAllResults(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "fetchPatterns":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_fetchPatterns(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getWorkloads":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getWorkloads(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getTraits":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getTraits(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getScopes":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getScopes(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getKubectlDescribe":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getKubectlDescribe(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "fetchPatternCatalogContent":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_fetchPatternCatalogContent(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "fetchFilterCatalogContent":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_fetchFilterCatalogContent(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getClusterResources":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getClusterResources(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "__type":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___type(ctx, field)
			})

		case "__schema":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___schema(ctx, field)
			})

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var resourceImplementors = []string{"Resource"}

func (ec *executionContext) _Resource(ctx context.Context, sel ast.SelectionSet, obj *customTypes.Resource) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, resourceImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Resource")
		case "kind":

			out.Values[i] = ec._Resource_kind(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "count":

			out.Values[i] = ec._Resource_count(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var subscriptionImplementors = []string{"Subscription"}

func (ec *executionContext) _Subscription(ctx context.Context, sel ast.SelectionSet) func(ctx context.Context) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, subscriptionImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Subscription",
	})
	if len(fields) != 1 {
		ec.Errorf(ctx, "must subscribe to exactly one stream")
		return nil
	}

	switch fields[0].Name {
	case "listenToAddonState":
		return ec._Subscription_listenToAddonState(ctx, fields[0])
	case "listenToControlPlaneState":
		return ec._Subscription_listenToControlPlaneState(ctx, fields[0])
	case "listenToDataPlaneState":
		return ec._Subscription_listenToDataPlaneState(ctx, fields[0])
	case "listenToOperatorState":
		return ec._Subscription_listenToOperatorState(ctx, fields[0])
	case "listenToMeshSyncEvents":
		return ec._Subscription_listenToMeshSyncEvents(ctx, fields[0])
	case "subscribePerfProfiles":
		return ec._Subscription_subscribePerfProfiles(ctx, fields[0])
	case "subscribePerfResults":
		return ec._Subscription_subscribePerfResults(ctx, fields[0])
	case "subscribeBrokerConnection":
		return ec._Subscription_subscribeBrokerConnection(ctx, fields[0])
	case "subscribeMesheryControllersStatus":
		return ec._Subscription_subscribeMesheryControllersStatus(ctx, fields[0])
	case "subscribeMeshSyncEvents":
		return ec._Subscription_subscribeMeshSyncEvents(ctx, fields[0])
	case "subscribeConfiguration":
		return ec._Subscription_subscribeConfiguration(ctx, fields[0])
	case "subscribeClusterResources":
		return ec._Subscription_subscribeClusterResources(ctx, fields[0])
	case "subscribeK8sContext":
		return ec._Subscription_subscribeK8sContext(ctx, fields[0])
	default:
		panic("unknown field " + strconv.Quote(fields[0].Name))
	}
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":

			out.Values[i] = ec.___Directive_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___Directive_description(ctx, field, obj)

		case "locations":

			out.Values[i] = ec.___Directive_locations(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":

			out.Values[i] = ec.___Directive_args(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isRepeatable":

			out.Values[i] = ec.___Directive_isRepeatable(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":

			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)

		case "isDeprecated":

			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":

			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":

			out.Values[i] = ec.___Field_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___Field_description(ctx, field, obj)

		case "args":

			out.Values[i] = ec.___Field_args(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":

			out.Values[i] = ec.___Field_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":

			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":

			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":

			out.Values[i] = ec.___InputValue_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___InputValue_description(ctx, field, obj)

		case "type":

			out.Values[i] = ec.___InputValue_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":

			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "description":

			out.Values[i] = ec.___Schema_description(ctx, field, obj)

		case "types":

			out.Values[i] = ec.___Schema_types(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":

			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":

			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)

		case "subscriptionType":

			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)

		case "directives":

			out.Values[i] = ec.___Schema_directives(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":

			out.Values[i] = ec.___Type_kind(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec.___Type_name(ctx, field, obj)

		case "description":

			out.Values[i] = ec.___Type_description(ctx, field, obj)

		case "fields":

			out.Values[i] = ec.___Type_fields(ctx, field, obj)

		case "interfaces":

			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)

		case "possibleTypes":

			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)

		case "enumValues":

			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)

		case "inputFields":

			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)

		case "ofType":

			out.Values[i] = ec.___Type_ofType(ctx, field, obj)

		case "specifiedByURL":

			out.Values[i] = ec.___Type_specifiedByURL(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNAddonList2ᚕᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐAddonListᚄ(ctx context.Context, sel ast.SelectionSet, v []*customTypes.AddonList) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAddonList2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐAddonList(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNAddonList2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐAddonList(ctx context.Context, sel ast.SelectionSet, v *customTypes.AddonList) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._AddonList(ctx, sel, v)
}

func (ec *executionContext) unmarshalNAny2interface(ctx context.Context, v interface{}) (interface{}, error) {
	res, err := graphql.UnmarshalAny(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNAny2interface(ctx context.Context, sel ast.SelectionSet, v interface{}) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	res := graphql.MarshalAny(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNCatalogFilter2ᚕᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐCatalogFilterᚄ(ctx context.Context, sel ast.SelectionSet, v []*customTypes.CatalogFilter) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCatalogFilter2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐCatalogFilter(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCatalogFilter2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐCatalogFilter(ctx context.Context, sel ast.SelectionSet, v *customTypes.CatalogFilter) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CatalogFilter(ctx, sel, v)
}

func (ec *executionContext) marshalNCatalogPattern2ᚕᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐCatalogPatternᚄ(ctx context.Context, sel ast.SelectionSet, v []*customTypes.CatalogPattern) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCatalogPattern2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐCatalogPattern(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCatalogPattern2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐCatalogPattern(ctx context.Context, sel ast.SelectionSet, v *customTypes.CatalogPattern) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CatalogPattern(ctx, sel, v)
}

func (ec *executionContext) marshalNClusterResources2githubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐClusterResources(ctx context.Context, sel ast.SelectionSet, v customTypes.ClusterResources) graphql.Marshaler {
	return ec._ClusterResources(ctx, sel, &v)
}

func (ec *executionContext) marshalNClusterResources2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐClusterResources(ctx context.Context, sel ast.SelectionSet, v *customTypes.ClusterResources) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ClusterResources(ctx, sel, v)
}

func (ec *executionContext) marshalNConfigurationPage2githubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐConfigurationPage(ctx context.Context, sel ast.SelectionSet, v customTypes.ConfigurationPage) graphql.Marshaler {
	return ec._ConfigurationPage(ctx, sel, &v)
}

func (ec *executionContext) marshalNConfigurationPage2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐConfigurationPage(ctx context.Context, sel ast.SelectionSet, v *customTypes.ConfigurationPage) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ConfigurationPage(ctx, sel, v)
}

func (ec *executionContext) marshalNContainer2ᚕᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐContainerᚄ(ctx context.Context, sel ast.SelectionSet, v []*customTypes.Container) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNContainer2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐContainer(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNContainer2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐContainer(ctx context.Context, sel ast.SelectionSet, v *customTypes.Container) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Container(ctx, sel, v)
}

func (ec *executionContext) marshalNControlPlane2ᚕᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐControlPlaneᚄ(ctx context.Context, sel ast.SelectionSet, v []*customTypes.ControlPlane) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNControlPlane2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐControlPlane(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNControlPlane2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐControlPlane(ctx context.Context, sel ast.SelectionSet, v *customTypes.ControlPlane) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ControlPlane(ctx, sel, v)
}

func (ec *executionContext) marshalNControlPlaneMember2ᚕᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐControlPlaneMemberᚄ(ctx context.Context, sel ast.SelectionSet, v []*customTypes.ControlPlaneMember) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNControlPlaneMember2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐControlPlaneMember(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNControlPlaneMember2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐControlPlaneMember(ctx context.Context, sel ast.SelectionSet, v *customTypes.ControlPlaneMember) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ControlPlaneMember(ctx, sel, v)
}

func (ec *executionContext) marshalNDataPlane2ᚕᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐDataPlaneᚄ(ctx context.Context, sel ast.SelectionSet, v []*customTypes.DataPlane) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDataPlane2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐDataPlane(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNDataPlane2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐDataPlane(ctx context.Context, sel ast.SelectionSet, v *customTypes.DataPlane) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DataPlane(ctx, sel, v)
}

func (ec *executionContext) marshalNError2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐError(ctx context.Context, sel ast.SelectionSet, v *customTypes.Error) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Error(ctx, sel, v)
}

func (ec *executionContext) unmarshalNID2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalID(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalID(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNKubectlDescribeDetails2githubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐKubectlDescribeDetails(ctx context.Context, sel ast.SelectionSet, v customTypes.KubectlDescribeDetails) graphql.Marshaler {
	return ec._KubectlDescribeDetails(ctx, sel, &v)
}

func (ec *executionContext) marshalNKubectlDescribeDetails2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐKubectlDescribeDetails(ctx context.Context, sel ast.SelectionSet, v *customTypes.KubectlDescribeDetails) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._KubectlDescribeDetails(ctx, sel, v)
}

func (ec *executionContext) marshalNKubernetesContextsPage2githubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐKubernetesContextsPage(ctx context.Context, sel ast.SelectionSet, v customTypes.KubernetesContextsPage) graphql.Marshaler {
	return ec._KubernetesContextsPage(ctx, sel, &v)
}

func (ec *executionContext) marshalNKubernetesContextsPage2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐKubernetesContextsPage(ctx context.Context, sel ast.SelectionSet, v *customTypes.KubernetesContextsPage) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._KubernetesContextsPage(ctx, sel, v)
}

func (ec *executionContext) marshalNLocation2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐLocation(ctx context.Context, sel ast.SelectionSet, v *customTypes.Location) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Location(ctx, sel, v)
}

func (ec *executionContext) unmarshalNMap2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	res, err := graphql.UnmarshalMap(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNMap2map(ctx context.Context, sel ast.SelectionSet, v map[string]interface{}) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	res := graphql.MarshalMap(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNMeshSyncEvent2githubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐMeshSyncEvent(ctx context.Context, sel ast.SelectionSet, v customTypes.MeshSyncEvent) graphql.Marshaler {
	return ec._MeshSyncEvent(ctx, sel, &v)
}

func (ec *executionContext) marshalNMeshSyncEvent2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐMeshSyncEvent(ctx context.Context, sel ast.SelectionSet, v *customTypes.MeshSyncEvent) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MeshSyncEvent(ctx, sel, v)
}

func (ec *executionContext) unmarshalNMesheryController2githubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐMesheryController(ctx context.Context, v interface{}) (customTypes.MesheryController, error) {
	var res customTypes.MesheryController
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNMesheryController2githubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐMesheryController(ctx context.Context, sel ast.SelectionSet, v customTypes.MesheryController) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNMesheryControllerStatus2githubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐMesheryControllerStatus(ctx context.Context, v interface{}) (customTypes.MesheryControllerStatus, error) {
	var res customTypes.MesheryControllerStatus
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNMesheryControllerStatus2githubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐMesheryControllerStatus(ctx context.Context, sel ast.SelectionSet, v customTypes.MesheryControllerStatus) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNMesheryControllersStatusListItem2ᚕᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐMesheryControllersStatusListItemᚄ(ctx context.Context, sel ast.SelectionSet, v []*customTypes.MesheryControllersStatusListItem) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMesheryControllersStatusListItem2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐMesheryControllersStatusListItem(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNMesheryControllersStatusListItem2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐMesheryControllersStatusListItem(ctx context.Context, sel ast.SelectionSet, v *customTypes.MesheryControllersStatusListItem) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MesheryControllersStatusListItem(ctx, sel, v)
}

func (ec *executionContext) marshalNNameSpace2ᚕᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐNameSpaceᚄ(ctx context.Context, sel ast.SelectionSet, v []*customTypes.NameSpace) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNNameSpace2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐNameSpace(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNNameSpace2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐNameSpace(ctx context.Context, sel ast.SelectionSet, v *customTypes.NameSpace) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._NameSpace(ctx, sel, v)
}

func (ec *executionContext) marshalNNullString2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐNullString(ctx context.Context, sel ast.SelectionSet, v *customTypes.NullString) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._NullString(ctx, sel, v)
}

func (ec *executionContext) marshalNOperatorControllerStatus2githubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐOperatorControllerStatus(ctx context.Context, sel ast.SelectionSet, v customTypes.OperatorControllerStatus) graphql.Marshaler {
	return ec._OperatorControllerStatus(ctx, sel, &v)
}

func (ec *executionContext) marshalNOperatorControllerStatus2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐOperatorControllerStatus(ctx context.Context, sel ast.SelectionSet, v *customTypes.OperatorControllerStatus) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._OperatorControllerStatus(ctx, sel, v)
}

func (ec *executionContext) marshalNOperatorStatus2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐOperatorStatus(ctx context.Context, sel ast.SelectionSet, v *customTypes.OperatorStatus) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._OperatorStatus(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPageFilter2githubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐPageFilter(ctx context.Context, v interface{}) (customTypes.PageFilter, error) {
	res, err := ec.unmarshalInputPageFilter(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPatternPageResult2githubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐPatternPageResult(ctx context.Context, sel ast.SelectionSet, v customTypes.PatternPageResult) graphql.Marshaler {
	return ec._PatternPageResult(ctx, sel, &v)
}

func (ec *executionContext) marshalNPatternPageResult2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐPatternPageResult(ctx context.Context, sel ast.SelectionSet, v *customTypes.PatternPageResult) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PatternPageResult(ctx, sel, v)
}

func (ec *executionContext) marshalNPerfPageProfiles2githubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐPerfPageProfiles(ctx context.Context, sel ast.SelectionSet, v customTypes.PerfPageProfiles) graphql.Marshaler {
	return ec._PerfPageProfiles(ctx, sel, &v)
}

func (ec *executionContext) marshalNPerfPageProfiles2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐPerfPageProfiles(ctx context.Context, sel ast.SelectionSet, v *customTypes.PerfPageProfiles) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PerfPageProfiles(ctx, sel, v)
}

func (ec *executionContext) marshalNPerfPageResult2githubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐPerfPageResult(ctx context.Context, sel ast.SelectionSet, v customTypes.PerfPageResult) graphql.Marshaler {
	return ec._PerfPageResult(ctx, sel, &v)
}

func (ec *executionContext) marshalNPerfPageResult2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐPerfPageResult(ctx context.Context, sel ast.SelectionSet, v *customTypes.PerfPageResult) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PerfPageResult(ctx, sel, v)
}

func (ec *executionContext) marshalNResource2ᚕᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐResourceᚄ(ctx context.Context, sel ast.SelectionSet, v []*customTypes.Resource) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNResource2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐResource(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNResource2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐResource(ctx context.Context, sel ast.SelectionSet, v *customTypes.Resource) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Resource(ctx, sel, v)
}

func (ec *executionContext) unmarshalNStatus2githubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐStatus(ctx context.Context, v interface{}) (customTypes.Status, error) {
	var res customTypes.Status
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNStatus2githubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐStatus(ctx context.Context, sel ast.SelectionSet, v customTypes.Status) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalOAny2interface(ctx context.Context, v interface{}) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalAny(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOAny2interface(ctx context.Context, sel ast.SelectionSet, v interface{}) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalAny(v)
	return res
}

func (ec *executionContext) marshalOApplicationPage2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐApplicationPage(ctx context.Context, sel ast.SelectionSet, v *customTypes.ApplicationPage) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ApplicationPage(ctx, sel, v)
}

func (ec *executionContext) marshalOApplicationResult2ᚕᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐApplicationResult(ctx context.Context, sel ast.SelectionSet, v []*customTypes.ApplicationResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOApplicationResult2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐApplicationResult(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOApplicationResult2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐApplicationResult(ctx context.Context, sel ast.SelectionSet, v *customTypes.ApplicationResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ApplicationResult(ctx, sel, v)
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	return res
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalBoolean(*v)
	return res
}

func (ec *executionContext) unmarshalOCatalogSelector2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐCatalogSelector(ctx context.Context, v interface{}) (*customTypes.CatalogSelector, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCatalogSelector(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOContainer2ᚕᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐContainerᚄ(ctx context.Context, sel ast.SelectionSet, v []*customTypes.Container) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNContainer2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐContainer(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOContainer_Port2ᚕᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐContainerPort(ctx context.Context, sel ast.SelectionSet, v []*customTypes.ContainerPort) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOContainer_Port2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐContainerPort(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOContainer_Port2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐContainerPort(ctx context.Context, sel ast.SelectionSet, v *customTypes.ContainerPort) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Container_Port(ctx, sel, v)
}

func (ec *executionContext) marshalOContainer_Status2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐContainerStatus(ctx context.Context, sel ast.SelectionSet, v *customTypes.ContainerStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Container_Status(ctx, sel, v)
}

func (ec *executionContext) marshalOError2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐError(ctx context.Context, sel ast.SelectionSet, v *customTypes.Error) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Error(ctx, sel, v)
}

func (ec *executionContext) marshalOFilterPage2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐFilterPage(ctx context.Context, sel ast.SelectionSet, v *customTypes.FilterPage) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FilterPage(ctx, sel, v)
}

func (ec *executionContext) marshalOFilterResult2ᚕᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐFilterResult(ctx context.Context, sel ast.SelectionSet, v []*customTypes.FilterResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOFilterResult2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐFilterResult(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOFilterResult2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐFilterResult(ctx context.Context, sel ast.SelectionSet, v *customTypes.FilterResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FilterResult(ctx, sel, v)
}

func (ec *executionContext) unmarshalOID2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalID(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOID2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalID(*v)
	return res
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalInt(*v)
	return res
}

func (ec *executionContext) marshalOKubernetesContext2ᚕᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐKubernetesContext(ctx context.Context, sel ast.SelectionSet, v []*customTypes.KubernetesContext) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOKubernetesContext2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐKubernetesContext(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOKubernetesContext2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐKubernetesContext(ctx context.Context, sel ast.SelectionSet, v *customTypes.KubernetesContext) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._KubernetesContext(ctx, sel, v)
}

func (ec *executionContext) unmarshalOMap2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalMap(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOMap2map(ctx context.Context, sel ast.SelectionSet, v map[string]interface{}) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalMap(v)
	return res
}

func (ec *executionContext) unmarshalOMeshType2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐMeshType(ctx context.Context, v interface{}) (*customTypes.MeshType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(customTypes.MeshType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOMeshType2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐMeshType(ctx context.Context, sel ast.SelectionSet, v *customTypes.MeshType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOMesheryResult2ᚕᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐMesheryResult(ctx context.Context, sel ast.SelectionSet, v []*customTypes.MesheryResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOMesheryResult2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐMesheryResult(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOMesheryResult2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐMesheryResult(ctx context.Context, sel ast.SelectionSet, v *customTypes.MesheryResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MesheryResult(ctx, sel, v)
}

func (ec *executionContext) marshalOOAMCapability2ᚕᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐOAMCapability(ctx context.Context, sel ast.SelectionSet, v []*customTypes.OAMCapability) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOOAMCapability2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐOAMCapability(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOOAMCapability2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐOAMCapability(ctx context.Context, sel ast.SelectionSet, v *customTypes.OAMCapability) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OAMCapability(ctx, sel, v)
}

func (ec *executionContext) marshalOOperatorControllerStatus2ᚕᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐOperatorControllerStatusᚄ(ctx context.Context, sel ast.SelectionSet, v []*customTypes.OperatorControllerStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNOperatorControllerStatus2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐOperatorControllerStatus(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOOperatorControllerStatusPerKubernetesContext2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐOperatorControllerStatusPerKubernetesContext(ctx context.Context, sel ast.SelectionSet, v *customTypes.OperatorControllerStatusPerKubernetesContext) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OperatorControllerStatusPerKubernetesContext(ctx, sel, v)
}

func (ec *executionContext) marshalOOperatorStatus2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐOperatorStatus(ctx context.Context, sel ast.SelectionSet, v *customTypes.OperatorStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OperatorStatus(ctx, sel, v)
}

func (ec *executionContext) marshalOOperatorStatusPerKubernetesContext2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐOperatorStatusPerKubernetesContext(ctx context.Context, sel ast.SelectionSet, v *customTypes.OperatorStatusPerKubernetesContext) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OperatorStatusPerKubernetesContext(ctx, sel, v)
}

func (ec *executionContext) marshalOPatternPageResult2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐPatternPageResult(ctx context.Context, sel ast.SelectionSet, v *customTypes.PatternPageResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PatternPageResult(ctx, sel, v)
}

func (ec *executionContext) marshalOPatternResult2ᚕᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐPatternResult(ctx context.Context, sel ast.SelectionSet, v []*customTypes.PatternResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOPatternResult2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐPatternResult(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOPatternResult2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐPatternResult(ctx context.Context, sel ast.SelectionSet, v *customTypes.PatternResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PatternResult(ctx, sel, v)
}

func (ec *executionContext) marshalOPerfProfile2ᚕᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐPerfProfile(ctx context.Context, sel ast.SelectionSet, v []*customTypes.PerfProfile) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOPerfProfile2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐPerfProfile(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOPerfProfile2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐPerfProfile(ctx context.Context, sel ast.SelectionSet, v *customTypes.PerfProfile) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PerfProfile(ctx, sel, v)
}

func (ec *executionContext) unmarshalOResyncActions2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐResyncActions(ctx context.Context, v interface{}) (*customTypes.ResyncActions, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputResyncActions(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOServiceMeshFilter2ᚖgithubᚗcomᚋphxvlabsᚗioᚋkubernexusᚋnexusᚑserverᚋgraphqlᚋcustomTypesᚐServiceMeshFilter(ctx context.Context, v interface{}) (*customTypes.ServiceMeshFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputServiceMeshFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚕᚖstring(ctx context.Context, v interface{}) ([]*string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOString2ᚖstring(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕᚖstring(ctx context.Context, sel ast.SelectionSet, v []*string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOString2ᚖstring(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
